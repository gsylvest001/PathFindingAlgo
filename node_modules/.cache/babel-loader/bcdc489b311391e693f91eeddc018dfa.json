{"ast":null,"code":"var _jsxFileName = \"/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cellSize: 15,\n      rows: 50,\n      columns: 40,\n      canvasHeight: 15 * 40,\n      canvasWidth: 15 * 50\n    };\n  }\n\n  componentDidMount() {\n    this.canvasVis.width = this.state.canvasWidth;\n    this.canvasVis.height = this.state.canvasHeight;\n    this.drawCell(this.canvasVis, 40, 40);\n  }\n\n  drawMap() {\n    for (let x = 0; x < rows; x + 15) {\n      for (let y = 0; y < columns; y + 15) {\n        this.drawCell(this.canvasVis, x, y);\n      }\n    }\n  }\n\n  drawCell(canvasID, startX, startY) {\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY\n    });\n    this.drawLine(canvasID, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    });\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    });\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX,\n      y: startY + this.state.cellSize\n    });\n  }\n\n  drawLine(canvasID, start, end) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasVis => this.canvasVis = canvasVis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js"],"names":["React","Component","ReactDom","visualizer","constructor","props","state","cellSize","rows","columns","canvasHeight","canvasWidth","componentDidMount","canvasVis","width","height","drawCell","drawMap","x","y","canvasID","startX","startY","drawLine","start","end","ctx","getContext","beginPath","moveTo","lineTo","stroke","closePath","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\n\nexport default class visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellSize: 15,\n            rows: 50,\n            columns: 40,\n            canvasHeight: 15 * 40,\n            canvasWidth: 15 * 50,\n            \n        }\n    }\n\n    componentDidMount() {\n        this.canvasVis.width = this.state.canvasWidth;\n        this.canvasVis.height = this.state.canvasHeight;\n\n        this.drawCell(this.canvasVis,40,40);\n    }\n\n    drawMap() {\n\n        for(let x = 0; x < rows; x+15){\n            for(let y = 0; y < columns; y+15){\n                this.drawCell(this.canvasVis,x,y);\n            }\n        }\n    }\n\n    drawCell(canvasID, startX, startY) {\n\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX + this.state.cellSize, y: startY});\n        this.drawLine(canvasID,{x: startX + this.state.cellSize, y: startY},{x: startX + this.state.cellSize, y: startY + this.state.cellSize});\n        this.drawLine(canvasID,{x: startX, y: startY + this.state.cellSize},{x: startX + this.state.cellSize, y: startY + this.state.cellSize});\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX, y: startY + this.state.cellSize});\n        \n    }\n\n    drawLine(canvasID, start, end) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.lineTo(end.x,end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref={ canvasVis => this.canvasVis = canvasVis}></canvas>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}