{"ast":null,"code":"var _jsxFileName = \"/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TreeNode {\n  constructor(x, y, action, parent) {\n    this.x = x;\n    this.y = y;\n    this.action = action;\n    this.parent = parent;\n  }\n\n}\n\nexport default class visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAlgoChange = event => {\n      console.log(event.target.value);\n    };\n\n    this.handleMapChange = event => {\n      //reseting search Grid\n      this.resetSearchGrid();\n      this.resetParameters(); //reseting start and goal position as well\n      //reseting base map and path map\n\n      let ctx = this.canvasVis.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n      let ctx2 = this.canvasPath.getContext(\"2d\");\n      ctx2.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n\n      if (event.target.value == \"default\") {\n        this.drawAutomataMap(3, 4, 5);\n      } else if (event.target.value == \"maze\") {\n        //drawing a more dense map\n        this.drawAutomataMap(3, 1, 1);\n      } else {\n        // blank map\n        this.drawBlankMap();\n      }\n    };\n\n    this.state = {\n      cellSize: 15,\n      width: 50,\n      height: 40,\n      canvasHeight: 15 * 40,\n      canvasWidth: 15 * 50,\n      gameMode: \"Path\"\n    };\n    this.startPosition = null;\n    this.goalPosition = null;\n    this.openNodes = [];\n    this.closedNodes = [];\n    this.path = [];\n    this.searchGrid = [];\n    this.allActions = [[0, 1], [1, 0], [-1, 0], [0, -1]];\n    this.mapCellularAutomata = [];\n    this.handleMouseClick = this.handleMouseClick.bind(this);\n    this.handleMouseHover = this.handleMouseHover.bind(this);\n    this.handleMapChange = this.handleMapChange.bind(this);\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n  }\n\n  componentDidMount() {\n    //setting height and width of all canvas\n    this.canvasVis.width = this.state.canvasWidth;\n    this.canvasVis.height = this.state.canvasHeight;\n    this.canvasOverlay.width = this.state.canvasWidth;\n    this.canvasOverlay.height = this.state.canvasHeight;\n    this.canvasPath.width = this.state.canvasWidth;\n    this.canvasPath.height = this.state.canvasHeight;\n    this.getCanvasPosition(this.canvasOverlay); //initializing search grid array\n\n    this.initializeSearchGrid(); //drawing default map\n\n    this.drawAutomataMap(3, 4, 5);\n  }\n\n  initializeSearchGrid() {\n    let width = this.state.width;\n    let height = this.state.height; //initializing searchGrid with Zeros as 2D array widthxheight\n\n    this.searchGrid = new Array(width).fill(0).map(() => new Array(height).fill(0));\n  }\n\n  resetParameters() {\n    this.openNodes = [];\n    this.closedNodes = [];\n    this.path = [];\n  }\n\n  resetSearchGrid() {\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        this.searchGrid[x][y] = 0;\n      }\n    }\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  }\n\n  drawBlankMap() {\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        let startingX = this.state.cellSize * x;\n        let startingY = this.state.cellSize * y;\n        this.drawCell(this.canvasVis, startingX, startingY, \"#7a7a7a\");\n      }\n    }\n  } //method used to draw map using cellular automata\n\n\n  drawAutomataMap(birthLimit, deathLimit, numberOfSimulations) {\n    let width = this.state.width;\n    let height = this.state.height; //initializing map array\n\n    let automataMap = new Array(width).fill(0).map(() => new Array(height).fill(0));\n    let chanceToBeginAlive = 0.40; //randomly initializing chance for cell to be alive for game of life\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        if (Math.random() < chanceToBeginAlive) {\n          automataMap[x][y] = 1;\n        }\n      }\n    } //run simulaton step for cellular automata\n\n\n    for (let i = 0; i < numberOfSimulations; i++) {\n      automataMap = this.automataSimulation(automataMap, birthLimit, deathLimit);\n    } //draw map using celluar automata results\n\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        let startingX = this.state.cellSize * x;\n        let startingY = this.state.cellSize * y;\n\n        if (automataMap[x][y] == 1) {\n          //alive\n          this.drawCell(this.canvasVis, startingX, startingY, \"#000000\");\n          this.fillCell(this.canvasVis, startingX, startingY, \"#95deb9\"); //updating search Grid\n\n          this.searchGrid[x][y] = 1;\n        } else {\n          // not alive\n          this.drawCell(this.canvasVis, startingX, startingY, \"#000000\");\n          this.fillCell(this.canvasVis, startingX, startingY, \"#357553\");\n        }\n      }\n    }\n  }\n\n  automataSimulation(map, birthLimit, deathLimit) {\n    //initializing map array\n    let newMap = new Array(this.state.width).fill(0).map(() => new Array(this.state.height).fill(0)); //looping through map\n\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        let numOfAliveNeighbors = this.countAliveNeighbors(map, x, y);\n\n        if (map[x][y] == 1) {\n          if (numOfAliveNeighbors < deathLimit) {\n            newMap[x][y] = 0;\n          } else {\n            newMap[x][y] = 1;\n          }\n        } else {\n          if (numOfAliveNeighbors > birthLimit) {\n            newMap[x][y] = 1;\n          } else {\n            newMap[x][y] = 0;\n          }\n        }\n      }\n    }\n\n    return newMap;\n  }\n\n  countAliveNeighbors(map, x, y) {\n    let alive = 0;\n\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let xNeighbour = x + i;\n        let yNeighbour = y + j;\n\n        if (i == 0 && j == 0) {\n          continue;\n        }\n\n        if (xNeighbour >= 0 && yNeighbour >= 0 && xNeighbour < this.state.width && yNeighbour < this.state.height) {\n          if (map[xNeighbour][yNeighbour] == 1) {\n            alive++;\n          }\n        } else {\n          alive++;\n        }\n      }\n    }\n\n    return alive;\n  }\n\n  drawCell(canvasID, startX, startY, color) {\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, color);\n  }\n\n  drawLine(canvasID, start, end, color) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  } //filling cell using top left coordiinates x and y of cell\n\n\n  fillCell(canvasID, x, y, fillColor) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + this.state.cellSize, y);\n    ctx.lineTo(x + this.state.cellSize, y + this.state.cellSize);\n    ctx.lineTo(x, y + this.state.cellSize);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  pixelToCell(pixelX, pixelY) {\n    let row = Math.floor(pixelX / this.state.cellSize);\n    let column = Math.floor(pixelY / this.state.cellSize);\n    let cell = {\n      x: row,\n      y: column\n    };\n    return cell;\n  }\n\n  handleMouseClick(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column cell which correspondds to where user clicked\n\n    let cellClicked = this.pixelToCell(offsetX, offsetY);\n\n    if (this.state.gameMode == \"Path\") {\n      this.configurePath(cellClicked);\n    } else {\n      this.buildTerrain(cellClicked);\n    }\n  }\n\n  handleMouseHover(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column of cell which correspondds to where user hovered\n\n    let cellHovered = this.pixelToCell(offsetX, offsetY); //getting x and y pixel value for cell\n\n    let pixelXValue = cellHovered.x * this.state.cellSize;\n    let pixelYValue = cellHovered.y * this.state.cellSize; //clearing all cells on overlay canvas\n\n    let ctx = this.canvasOverlay.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //updating hovered cell\n\n    this.drawCell(this.canvasOverlay, pixelXValue, pixelYValue, \"#f7071f\");\n  } //method used to set start and goal position of path\n\n\n  configurePath(gridCell) {\n    let pixelX = gridCell.x * this.state.cellSize;\n    let pixelY = gridCell.y * this.state.cellSize;\n\n    if (this.startPosition == null) {\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#f7071f\");\n      this.startPosition = {\n        x: gridCell.x,\n        y: gridCell.y\n      };\n    } else if (this.goalPosition == null) {\n      //checking if position is same as start Location\n      let startPos = this.startPosition; //getting the type of terrain for start and goal position\n\n      let stGridColor = this.searchGrid[startPos.x][startPos.y];\n      let endGridColor = this.searchGrid[gridCell.x][gridCell.y];\n\n      if (!(gridCell.x == this.startPosition.x && gridCell.y == this.startPosition.y) && stGridColor == endGridColor) {\n        this.fillCell(this.canvasPath, pixelX, pixelY, \"#34eb52\");\n        this.goalPosition = {\n          x: gridCell.x,\n          y: gridCell.y\n        }; //find path to goal location\n\n        this.bfs();\n      }\n    } else {\n      // restarting goal and start position\n      //clearing all cells\n      let ctx = this.canvasPath.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //reseting start position and goal position\n\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#f7071f\");\n      this.goalPosition = null;\n      this.startPosition = {\n        x: gridCell.x,\n        y: gridCell.y\n      }; //reseting paramters for path finding\n\n      this.resetParameters();\n    }\n  }\n\n  buildTerrain(gridCell) {\n    let pixelX = gridCell.x * this.state.cellSize;\n    let pixelY = gridCell.y * this.state.cellSize; //checking to see if there is already this type of terrain on grid cell\n\n    if (this.searchGrid[gridCell.x][gridCell.y] != 0) {\n      //coloring cell to indicate terrain\n      this.fillCell(this.canvasVis, pixelX, pixelY, \"#357553\");\n      this.drawCell(this.canvasVis, pixelX, pixelY, \"#000000\"); //adding terrain to search grid so that we know where obstacles\n\n      this.searchGrid[gridCell.x][gridCell.y] = 0;\n    }\n  }\n\n  findPath(action, parentNode) {\n    let currentNode = parentNode;\n\n    while (currentNode.parent != null) {\n      let previousState = currentNode.parent;\n      this.path.push(currentNode.action); //finding node which corressponds to the parent node\n\n      for (let i = 0; i < this.closedNodes.length; i++) {\n        let previousNode = this.closedNodes[i];\n\n        if (previousNode.x == previousState[0] && previousNode.y == previousState[1]) {\n          currentNode = previousNode;\n          break;\n        }\n      }\n    }\n\n    this.path.reverse(); //drawing path to goal\n\n    this.drawPath();\n  }\n\n  drawPath() {\n    let currentPosition = this.startPosition; //looping through path actions\n\n    for (let i = 0; i < this.path.length; i++) {\n      let pathAction = this.path[i];\n      let newPositionX = currentPosition.x + pathAction[0];\n      let newPositionY = currentPosition.y + pathAction[1];\n      let pixelX = newPositionX * this.state.cellSize;\n      let pixelY = newPositionY * this.state.cellSize; //drawing Path\n\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#ffffff\"); //updating current Position\n\n      currentPosition = {\n        x: newPositionX,\n        y: newPositionY\n      };\n    }\n  }\n\n  containsElement(node, arr) {\n    let found = false;\n\n    for (let i = 0; i < arr.length; i++) {\n      let val = arr[i];\n\n      if (node.x == val.x && node.y == val.y) {\n        found = true;\n        break;\n      }\n    }\n\n    return found;\n  }\n\n  isActionLegal(node, action) {\n    let width = this.state.width;\n    let height = this.state.height;\n    let newX = node.x + action[0];\n    let newY = node.y + action[1];\n    let childNode = {\n      x: newX,\n      y: newY\n    };\n    let closedList = this.closedNodes;\n    let openList = this.openNodes;\n\n    if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n      //check if action will bring us outside map\n      return false;\n    } else if (this.containsElement(childNode, closedList)) {\n      //checking if action will lead to already expanded node\n      return false;\n    } else if (this.containsElement(childNode, openList)) {\n      // checking to see if action will lead to node in open list\n      return false;\n    } else if (this.searchGrid[node.x][node.y] != this.searchGrid[newX][newY]) {\n      //used to check if parent and child node generated from action is the same type of terrain or color.\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  bfs() {\n    let startPosition = this.startPosition;\n    let rootNode = new TreeNode(startPosition.x, startPosition.y, null, null); //adding root node to open list\n\n    this.openNodes.push(rootNode);\n\n    while (this.openNodes.length != 0) {\n      //looping through open list until it is empty\n      let parentNode = this.openNodes.shift();\n\n      for (let i = 0; i < this.allActions.length; i++) {\n        let action = this.allActions[i];\n        let isLegal = this.isActionLegal(parentNode, action);\n\n        if (isLegal) {\n          let childNodeX = action[0] + parentNode.x;\n          let childNodeY = action[1] + parentNode.y; //checking to see if we are at goal node\n\n          if (childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y) {\n            //finding Path\n            this.findPath(action, parentNode);\n          } //adding to open list\n\n\n          this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x, parentNode.y]));\n        }\n      } //adding expanded parent node to closed list \n\n\n      this.closedNodes.push(parentNode);\n    }\n\n    if (this.path.length == 0 && this.openNodes.length == 0) {\n      //path could not be found\n      alert(\"Path could not be found!\"); //reseting start and goal position\n      //clearing all cells\n\n      let ctx = this.canvasPath.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //reseting start position and goal position\n\n      this.goalPosition = null;\n      this.startPosition = null; //reseting paramters for path finding\n\n      this.resetParameters();\n    }\n  }\n\n  dfs() {\n    let startPosition = this.startPosition;\n    let rootNode = new TreeNode(startPosition.x, startPosition.y, null, null); //adding root node to open list\n\n    this.openNodes.push(rootNode);\n\n    while (this.openNodes.length != 0) {\n      //looping through open list until it is empty\n      let parentNode = this.openNodes.pop();\n\n      for (let i = 0; i < this.allActions.length; i++) {\n        let action = this.allActions[i];\n        let isLegal = this.isActionLegal(parentNode, action);\n\n        if (isLegal) {\n          let childNodeX = action[0] + parentNode.x;\n          let childNodeY = action[1] + parentNode.y; //checking to see if we are at goal node\n\n          if (childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y) {\n            //finding Path\n            this.findPath(action, parentNode);\n          } //adding to open list\n\n\n          this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x, parentNode.y]));\n        }\n      } //adding expanded parent node to closed list \n\n\n      this.closedNodes.push(parentNode);\n    }\n  }\n\n  changeMode() {\n    if (this.state.gameMode == \"Path\") {\n      this.setState({\n        gameMode: \"Build\"\n      });\n    } else {\n      this.setState({\n        gameMode: \"Path\"\n      });\n    }\n  }\n\n  render() {\n    let gameMode = this.state.gameMode;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasVis => this.canvasVis = canvasVis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasPath => this.canvasPath = canvasPath,\n          onMouseDown: this.handleMouseClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasOverlay => this.canvasOverlay = canvasOverlay,\n          onMouseDown: this.handleMouseClick,\n          onMouseMove: this.handleMouseHover\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            marginTop: 10\n          },\n          children: \"Config/Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"creativeButton\",\n          onClick: this.changeMode,\n          children: gameMode == \"Path\" ? \"Path Mode\" : \"Build Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"maps\",\n          children: \"Choose Map:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"mapSelection\",\n          id: \"maps\",\n          name: \"maps\",\n          onChange: this.handleMapChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"default\",\n            children: \"Cave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"maze\",\n            children: \"Maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blank\",\n            children: \"Blank\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"algo\",\n          children: \"Choose a Path Finding Algorithm:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"algo\",\n          name: \"algo\",\n          onChange: this.handleAlgoChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bfs\",\n            children: \"BFS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dfs\",\n            children: \"DFS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"aStar\",\n            children: \"A * \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js"],"names":["React","Component","ReactDom","TreeNode","constructor","x","y","action","parent","visualizer","props","handleAlgoChange","event","console","log","target","value","handleMapChange","resetSearchGrid","resetParameters","ctx","canvasVis","getContext","clearRect","state","canvasWidth","canvasHeight","ctx2","canvasPath","drawAutomataMap","drawBlankMap","cellSize","width","height","gameMode","startPosition","goalPosition","openNodes","closedNodes","path","searchGrid","allActions","mapCellularAutomata","handleMouseClick","bind","handleMouseHover","changeMode","componentDidMount","canvasOverlay","getCanvasPosition","initializeSearchGrid","Array","fill","map","canvasID","rect","getBoundingClientRect","setState","canvasPosition","left","right","top","bottom","startingX","startingY","drawCell","birthLimit","deathLimit","numberOfSimulations","automataMap","chanceToBeginAlive","Math","random","i","automataSimulation","fillCell","newMap","numOfAliveNeighbors","countAliveNeighbors","alive","j","xNeighbour","yNeighbour","startX","startY","color","drawLine","start","end","beginPath","moveTo","strokeStyle","lineTo","stroke","closePath","fillColor","fillStyle","pixelToCell","pixelX","pixelY","row","floor","column","cell","e","offsetX","pageX","offsetY","pageY","cellClicked","configurePath","buildTerrain","cellHovered","pixelXValue","pixelYValue","gridCell","startPos","stGridColor","endGridColor","bfs","findPath","parentNode","currentNode","previousState","push","length","previousNode","reverse","drawPath","currentPosition","pathAction","newPositionX","newPositionY","containsElement","node","arr","found","val","isActionLegal","newX","newY","childNode","closedList","openList","rootNode","shift","isLegal","childNodeX","childNodeY","alert","dfs","pop","render","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\n\nclass TreeNode {\n    constructor(x, y, action, parent) {\n        this.x = x;\n        this.y = y;\n        this.action = action;\n        this.parent = parent;\n    }\n}\n\nexport default class visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellSize: 15,\n            width: 50,\n            height: 40,\n            canvasHeight: 15 * 40,\n            canvasWidth: 15 * 50,\n            gameMode: \"Path\"\n        }\n\n        this.startPosition = null;\n        this.goalPosition = null;\n        this.openNodes = [];\n        this.closedNodes = [];\n        this.path = [];\n        this.searchGrid = [];\n        this.allActions = [[0,1],[1,0],[-1,0],[0,-1]];\n        this.mapCellularAutomata = [];\n\n        this.handleMouseClick = this.handleMouseClick.bind(this);\n        this.handleMouseHover = this.handleMouseHover.bind(this);\n        this.handleMapChange = this.handleMapChange.bind(this);\n        this.handleAlgoChange = this.handleAlgoChange.bind(this);\n        this.changeMode = this.changeMode.bind(this);\n    }\n\n    componentDidMount() {\n        //setting height and width of all canvas\n        this.canvasVis.width = this.state.canvasWidth;\n        this.canvasVis.height = this.state.canvasHeight;\n\n        this.canvasOverlay.width = this.state.canvasWidth;\n        this.canvasOverlay.height = this.state.canvasHeight;\n\n        this.canvasPath.width = this.state.canvasWidth;\n        this.canvasPath.height = this.state.canvasHeight;\n\n        this.getCanvasPosition(this.canvasOverlay);\n\n        //initializing search grid array\n        this.initializeSearchGrid();\n\n        //drawing default map\n        this.drawAutomataMap(3,4,5);\n    }\n\n    initializeSearchGrid() {\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        //initializing searchGrid with Zeros as 2D array widthxheight\n        this.searchGrid = new Array(width).fill(0).map(() => new Array(height).fill(0));\n\n    }\n\n    resetParameters() {\n        this.openNodes = [];\n        this.closedNodes = [];\n        this.path = [];\n    }\n\n    resetSearchGrid() {\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n                this.searchGrid[x][y] = 0;\n            }\n        }\n    }\n\n    getCanvasPosition(canvasID) {\n        let rect = canvasID.getBoundingClientRect();\n        this.setState({ canvasPosition: {left: rect.left, right: rect.right, top: rect.top, bottom: rect.bottom } });\n    }\n\n    drawBlankMap() {\n\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n                let startingX = this.state.cellSize * x;\n                let startingY = this.state.cellSize * y;\n                this.drawCell(this.canvasVis,startingX,startingY,\"#7a7a7a\");\n            }\n        }\n    }\n\n    //method used to draw map using cellular automata\n    drawAutomataMap(birthLimit, deathLimit, numberOfSimulations) {\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        //initializing map array\n        let automataMap = new Array(width).fill(0).map(() => new Array(height).fill(0));\n\n        let chanceToBeginAlive = 0.40;\n\n        //randomly initializing chance for cell to be alive for game of life\n        for(let x = 0; x < width; x++){\n            for(let y = 0; y < height; y++){\n                if(Math.random() < chanceToBeginAlive){\n                    automataMap[x][y] = 1;\n                }\n            }\n        }\n\n        //run simulaton step for cellular automata\n        for(let i = 0; i < numberOfSimulations; i++){\n            automataMap = this.automataSimulation(automataMap,birthLimit,deathLimit);\n        }\n\n        //draw map using celluar automata results\n        for(let x = 0; x < width; x++){\n            for(let y = 0; y < height; y++){\n                let startingX = this.state.cellSize * x;\n                let startingY = this.state.cellSize * y;\n\n                if(automataMap[x][y] == 1){ //alive\n                    this.drawCell(this.canvasVis,startingX,startingY,\"#000000\");\n                    this.fillCell(this.canvasVis,startingX,startingY,\"#95deb9\");\n\n                    //updating search Grid\n                    this.searchGrid[x][y] = 1;\n                }else{ // not alive\n                    this.drawCell(this.canvasVis,startingX,startingY,\"#000000\");\n                    this.fillCell(this.canvasVis,startingX,startingY,\"#357553\");\n                }\n                \n            }\n        }\n\n        \n    }\n\n    automataSimulation(map,birthLimit,deathLimit) {\n\n        //initializing map array\n        let newMap = new Array(this.state.width).fill(0).map(() => new Array(this.state.height).fill(0));\n\n        //looping through map\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n\n                let numOfAliveNeighbors = this.countAliveNeighbors(map,x,y);\n\n                if(map[x][y] == 1){\n                    if(numOfAliveNeighbors < deathLimit){\n                        newMap[x][y] = 0;\n                    }else{\n                        newMap[x][y] = 1;\n                    }\n                }else{\n                    if(numOfAliveNeighbors > birthLimit){\n                        newMap[x][y] = 1;\n                    }else{\n                        newMap[x][y] = 0;\n                    }\n                }\n\n            }\n        }\n\n        return newMap;\n\n    }\n\n    countAliveNeighbors(map,x,y) {\n        \n        let alive = 0;\n\n        for(let i = -1; i<2; i++){\n            for(let j= -1; j<2; j++){\n\n                let xNeighbour = x+i;\n                let yNeighbour = y+j;\n                \n                if(i == 0 && j == 0){ continue; }\n\n                if( (xNeighbour >= 0 && yNeighbour >= 0) && (xNeighbour < this.state.width && yNeighbour < this.state.height) )\n                {\n                    if(map[xNeighbour][yNeighbour] == 1)\n                    {\n                        alive++;\n                    }\n                }else\n                {\n                    alive++;\n                }\n            }\n        }\n    \n        return alive;\n    }\n\n    drawCell(canvasID, startX, startY, color) {\n\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX + this.state.cellSize, y: startY}, color);\n        this.drawLine(canvasID,{x: startX + this.state.cellSize, y: startY},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY + this.state.cellSize},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX, y: startY + this.state.cellSize}, color);\n        \n    }\n\n    drawLine(canvasID, start, end, color) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.strokeStyle = color;\n        ctx.lineTo(end.x,end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    //filling cell using top left coordiinates x and y of cell\n    fillCell(canvasID, x, y, fillColor) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.fillStyle = fillColor;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x+this.state.cellSize,y);\n        ctx.lineTo(x+this.state.cellSize,y + this.state.cellSize);\n        ctx.lineTo(x,y + this.state.cellSize);\n        ctx.lineTo(x,y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    pixelToCell(pixelX,pixelY) {\n\n        let row = Math.floor(pixelX / this.state.cellSize);\n        let column = Math.floor(pixelY / this.state.cellSize);\n\n        let cell = {x : row, y: column};\n\n        return cell;\n\n    }\n\n    handleMouseClick(e) {\n        const {left, right, top, bottom } = this.state.canvasPosition;\n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column cell which correspondds to where user clicked\n        let cellClicked = this.pixelToCell(offsetX,offsetY);\n\n        if(this.state.gameMode == \"Path\"){\n            this.configurePath(cellClicked);\n        }else{\n            this.buildTerrain(cellClicked);\n        }\n\n    }\n\n    handleMouseHover(e) {\n        \n        const {left, right, top, bottom } = this.state.canvasPosition; \n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column of cell which correspondds to where user hovered\n        let cellHovered = this.pixelToCell(offsetX,offsetY);\n\n        //getting x and y pixel value for cell\n        let pixelXValue = cellHovered.x * this.state.cellSize;\n        let pixelYValue = cellHovered.y * this.state.cellSize;\n\n        //clearing all cells on overlay canvas\n        let ctx = this.canvasOverlay.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        //updating hovered cell\n        this.drawCell(this.canvasOverlay,pixelXValue,pixelYValue,\"#f7071f\");\n        \n    }\n\n    //method used to set start and goal position of path\n    configurePath(gridCell) {\n\n        let pixelX = gridCell.x * this.state.cellSize;\n        let pixelY = gridCell.y * this.state.cellSize;\n\n        if(this.startPosition == null){\n            this.fillCell(this.canvasPath,pixelX,pixelY,\"#f7071f\");\n            this.startPosition = {x: gridCell.x, y: gridCell.y};\n        }else if(this.goalPosition == null){\n            //checking if position is same as start Location\n            let startPos = this.startPosition;\n\n            //getting the type of terrain for start and goal position\n            let stGridColor = this.searchGrid[startPos.x][startPos.y];\n            let endGridColor = this.searchGrid[gridCell.x][gridCell.y];\n\n            if( !(gridCell.x == this.startPosition.x && gridCell.y == this.startPosition.y) && stGridColor == endGridColor ){\n                \n                \n                this.fillCell(this.canvasPath,pixelX,pixelY,\"#34eb52\");\n                this.goalPosition = {x: gridCell.x, y: gridCell.y}; \n\n                //find path to goal location\n                this.bfs();\n            }\n        }else{ // restarting goal and start position\n\n            //clearing all cells\n            let ctx = this.canvasPath.getContext(\"2d\");\n            ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n            //reseting start position and goal position\n            this.fillCell(this.canvasPath,pixelX,pixelY,\"#f7071f\");\n            this.goalPosition = null;\n            this.startPosition = {x: gridCell.x, y: gridCell.y};\n        \n            //reseting paramters for path finding\n            this.resetParameters();\n        }\n\n    }\n\n    buildTerrain(gridCell) {\n\n        let pixelX = gridCell.x * this.state.cellSize;\n        let pixelY = gridCell.y * this.state.cellSize;\n\n        //checking to see if there is already this type of terrain on grid cell\n        if(this.searchGrid[gridCell.x][gridCell.y] != 0){\n            //coloring cell to indicate terrain\n            this.fillCell(this.canvasVis,pixelX,pixelY,\"#357553\");\n            this.drawCell(this.canvasVis,pixelX,pixelY,\"#000000\");\n\n            //adding terrain to search grid so that we know where obstacles\n            this.searchGrid[gridCell.x][gridCell.y] = 0;\n\n        }\n\n        \n\n    }\n\n    findPath(action, parentNode){\n    \n        let currentNode = parentNode;\n\n        while (currentNode.parent != null){\n\n            let previousState = currentNode.parent;\n            this.path.push(currentNode.action);\n            //finding node which corressponds to the parent node\n            for(let i = 0; i < this.closedNodes.length; i++){\n                let previousNode = this.closedNodes[i];\n                if(previousNode.x == previousState[0] && previousNode.y == previousState[1]){\n                    currentNode = previousNode;\n                    break;\n                }\n\n            }\n        }\n\n        this.path.reverse();\n\n        //drawing path to goal\n        this.drawPath();\n        \n    }\n\n    drawPath() {\n       \n        let currentPosition = this.startPosition;\n        \n        //looping through path actions\n        for(let i = 0; i < this.path.length; i++){\n            let pathAction = this.path[i];\n\n            let newPositionX = currentPosition.x + pathAction[0];\n            let newPositionY = currentPosition.y + pathAction[1];\n\n            let pixelX = newPositionX * this.state.cellSize;\n            let pixelY = newPositionY * this.state.cellSize;\n\n            //drawing Path\n            this.fillCell(this.canvasPath, pixelX, pixelY, \"#ffffff\");\n\n            //updating current Position\n            currentPosition = {x: newPositionX, y: newPositionY};\n        }\n    }\n\n    containsElement(node,arr){\n        let found = false;\n\n        for(let i = 0; i < arr.length; i++){\n            \n            let val = arr[i];\n\n            if(node.x == val.x && node.y == val.y){\n                found = true;\n                break;\n            }\n        }\n\n        return found;      \n    }\n\n    isActionLegal(node, action){\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        let newX = node.x + action[0];\n        let newY = node.y + action[1];\n\n        let childNode = {x: newX, y: newY};\n       \n        let closedList = this.closedNodes;\n        let openList = this.openNodes;\n\n    \n        if( (newX < 0 || newY < 0) || (newX >= width || newY >= height ) ){ //check if action will bring us outside map\n            return false;\n        }else if(this.containsElement(childNode,closedList)){ //checking if action will lead to already expanded node\n            return false;\n        }else if(this.containsElement(childNode,openList)){ // checking to see if action will lead to node in open list\n            return false;\n        }else if(this.searchGrid[node.x][node.y] != this.searchGrid[newX][newY]){ //used to check if parent and child node generated from action is the same type of terrain or color.\n            return false;\n        }\n        else{\n            return true;\n        } \n\n    }\n\n    bfs(){\n\n        let startPosition = this.startPosition;\n        let rootNode = new TreeNode(startPosition.x, startPosition.y,null,null);\n\n        //adding root node to open list\n        this.openNodes.push(rootNode);\n\n        while(this.openNodes.length != 0){ //looping through open list until it is empty\n            let parentNode = this.openNodes.shift();\n            \n            for(let i = 0; i < this.allActions.length; i++){\n                let action = this.allActions[i];\n    \n                let isLegal = this.isActionLegal(parentNode,action);\n\n                if(isLegal){\n                    let childNodeX = action[0] + parentNode.x;\n                    let childNodeY = action[1] + parentNode.y;\n\n                    //checking to see if we are at goal node\n                    if(childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y){\n                        //finding Path\n                        this.findPath(action, parentNode);\n                    }\n\n                    //adding to open list\n                    this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x,parentNode.y]));\n                }\n                \n            }\n\n            //adding expanded parent node to closed list \n            this.closedNodes.push(parentNode); \n        }\n\n        if(this.path.length == 0 && this.openNodes.length == 0){ //path could not be found\n            alert(\"Path could not be found!\");\n\n            //reseting start and goal position\n\n            //clearing all cells\n            let ctx = this.canvasPath.getContext(\"2d\");\n            ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n            //reseting start position and goal position\n            this.goalPosition = null;\n            this.startPosition = null;\n        \n            //reseting paramters for path finding\n            this.resetParameters();\n\n        }\n    }\n\n    dfs(){\n\n        let startPosition = this.startPosition;\n        let rootNode = new TreeNode(startPosition.x, startPosition.y,null,null);\n\n        //adding root node to open list\n        this.openNodes.push(rootNode);\n\n        while(this.openNodes.length != 0){ //looping through open list until it is empty\n            let parentNode = this.openNodes.pop();\n\n            for(let i = 0; i < this.allActions.length; i++){\n                let action = this.allActions[i];\n    \n                let isLegal = this.isActionLegal(parentNode,action);\n\n                if(isLegal){\n                    let childNodeX = action[0] + parentNode.x;\n                    let childNodeY = action[1] + parentNode.y;\n\n                    //checking to see if we are at goal node\n                    if(childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y){\n                        //finding Path\n                        this.findPath(action, parentNode);\n                    }\n\n                    //adding to open list\n                    this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x,parentNode.y]));\n                }\n            }\n\n            //adding expanded parent node to closed list \n            this.closedNodes.push(parentNode);\n        }\n    }\n\n    handleAlgoChange = (event) => {\n        console.log(event.target.value);\n    }\n\n    handleMapChange = (event) => {\n\n        //reseting search Grid\n        this.resetSearchGrid();\n\n        this.resetParameters();\n\n        //reseting start and goal position as well\n\n        //reseting base map and path map\n        let ctx = this.canvasVis.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        let ctx2 = this.canvasPath.getContext(\"2d\");\n        ctx2.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        if(event.target.value == \"default\"){\n            this.drawAutomataMap(3,4,5);\n        }else if(event.target.value == \"maze\"){ //drawing a more dense map\n            this.drawAutomataMap(3,1,1);\n        }else{ // blank map\n            this.drawBlankMap();\n        }\n       \n    }\n\n    changeMode() {\n\n        if(this.state.gameMode == \"Path\"){\n            this.setState({ gameMode: \"Build\"});\n        }else{\n            this.setState({ gameMode: \"Path\"});\n        }\n    }\n\n\n\n\n\n    render() {\n        let gameMode = this.state.gameMode;\n\n        return (\n            <div className=\"main\">\n                <div>\n                    <canvas ref={ canvasVis => this.canvasVis = canvasVis}></canvas>\n                    <canvas ref={ canvasPath => this.canvasPath = canvasPath} onMouseDown = {this.handleMouseClick}></canvas>\n                    <canvas ref={ canvasOverlay => this.canvasOverlay = canvasOverlay} onMouseDown = {this.handleMouseClick} onMouseMove = {this.handleMouseHover} ></canvas>\n                </div>\n                \n\n                <div className=\"controls\">\n                    <h1 style={{ marginTop: 10}}>Config/Controls</h1>\n                    <button className=\"creativeButton\" onClick={this.changeMode}>{gameMode == \"Path\" ? \"Path Mode\" : \"Build Mode\"}</button>\n\n                    <label for=\"maps\">Choose Map:</label>\n                    <select className=\"mapSelection\" id=\"maps\" name=\"maps\" onChange={this.handleMapChange}>\n                        <option value=\"default\">Cave</option>\n                        <option value=\"maze\">Maze</option>\n                        <option value=\"blank\">Blank</option>\n                    </select>\n                    \n                    <label for=\"algo\">Choose a Path Finding Algorithm:</label>\n                    <select id=\"algo\" name=\"algo\" onChange={this.handleAlgoChange}>\n                        <option value=\"bfs\">BFS</option>\n                        <option value=\"dfs\">DFS</option>\n                        <option value=\"aStar\">A * </option>\n                    </select>\n                    \n                </div>\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}