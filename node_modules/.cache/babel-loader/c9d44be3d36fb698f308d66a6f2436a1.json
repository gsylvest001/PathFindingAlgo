{"ast":null,"code":"var _jsxFileName = \"/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TreeNode {\n  constructor(x, y, action, parent, g, h) {\n    this.x = x;\n    this.y = y;\n    this.action = action;\n    this.parent = parent;\n    this.g = g;\n    this.h = h;\n  }\n\n}\n\nexport default class visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAlgoChange = event => {\n      this.resetParameters(); //reseting start and goal position as well\n\n      this.startPosition = null;\n      this.goalPosition = null; //reseting canvas which draws path\n\n      let ctx2 = this.canvasPath.getContext(\"2d\");\n      ctx2.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n\n      if (event.target.value == \"bfs\") {\n        this.setState({\n          currentAlgorithm: \"bfs\"\n        });\n      } else if (event.target.value == \"dfs\") {\n        this.setState({\n          currentAlgorithm: \"dfs\"\n        });\n      } else {\n        //A* star\n        this.setState({\n          currentAlgorithm: \"heuristic\"\n        });\n\n        if (event.target.value == \"ucs\") {\n          this.setState({\n            currentHeuristic: \"ucs\"\n          });\n        } else if (event.target.value == \"gbfs\") {\n          this.setState({\n            currentHeuristic: \"gbfs\"\n          });\n        } else {\n          this.setState({\n            currentHeuristic: \"aStar\"\n          });\n        }\n      }\n    };\n\n    this.handleMapChange = event => {\n      //reseting search Grid\n      this.resetSearchGrid();\n      this.resetParameters(); //reseting start and goal position as well\n\n      this.startPosition = null;\n      this.goalPosition = null; //reseting base map and path map\n\n      let ctx = this.canvasVis.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n      let ctx2 = this.canvasPath.getContext(\"2d\");\n      ctx2.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n\n      if (event.target.value == \"default\") {\n        this.drawAutomataMap(3, 4, 5);\n      } else if (event.target.value == \"maze\") {\n        //drawing a more dense map\n        this.drawAutomataMap(3, 1, 1);\n      } else {\n        // blank map\n        this.drawBlankMap();\n      }\n    };\n\n    this.state = {\n      cellSize: 15,\n      width: 50,\n      height: 40,\n      canvasHeight: 15 * 40,\n      canvasWidth: 15 * 50,\n      gameMode: \"Path\",\n      currentAlgorithm: \"bfs\",\n      currentHeuristic: null\n    };\n    this.startPosition = null;\n    this.goalPosition = null;\n    this.openNodes = [];\n    this.closedNodes = [];\n    this.path = [];\n    this.searchGrid = [];\n    this.allActions = [[0, 1], [1, 0], [-1, 0], [0, -1]];\n    this.mapCellularAutomata = [];\n    this.handleMouseClick = this.handleMouseClick.bind(this);\n    this.handleMouseHover = this.handleMouseHover.bind(this);\n    this.handleMapChange = this.handleMapChange.bind(this);\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n  }\n\n  componentDidMount() {\n    //setting height and width of all canvas\n    this.canvasVis.width = this.state.canvasWidth;\n    this.canvasVis.height = this.state.canvasHeight;\n    this.canvasOverlay.width = this.state.canvasWidth;\n    this.canvasOverlay.height = this.state.canvasHeight;\n    this.canvasPath.width = this.state.canvasWidth;\n    this.canvasPath.height = this.state.canvasHeight;\n    this.getCanvasPosition(this.canvasOverlay); //initializing search grid array\n\n    this.initializeSearchGrid(); //drawing default map\n\n    this.drawAutomataMap(3, 4, 5);\n  }\n\n  initializeSearchGrid() {\n    let width = this.state.width;\n    let height = this.state.height; //initializing searchGrid with Zeros as 2D array widthxheight\n\n    this.searchGrid = new Array(width).fill(0).map(() => new Array(height).fill(0));\n  }\n\n  resetParameters() {\n    this.openNodes = [];\n    this.closedNodes = [];\n    this.path = [];\n  }\n\n  resetSearchGrid() {\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        this.searchGrid[x][y] = 0;\n      }\n    }\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  }\n\n  drawBlankMap() {\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        let startingX = this.state.cellSize * x;\n        let startingY = this.state.cellSize * y;\n        this.drawCell(this.canvasVis, startingX, startingY, \"#000000\");\n        this.fillCell(this.canvasVis, startingX, startingY, \"#95deb9\");\n      }\n    }\n  } //method used to draw map using cellular automata\n\n\n  drawAutomataMap(birthLimit, deathLimit, numberOfSimulations) {\n    let width = this.state.width;\n    let height = this.state.height; //initializing map array\n\n    let automataMap = new Array(width).fill(0).map(() => new Array(height).fill(0));\n    let chanceToBeginAlive = 0.40; //randomly initializing chance for cell to be alive for game of life\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        if (Math.random() < chanceToBeginAlive) {\n          automataMap[x][y] = 1;\n        }\n      }\n    } //run simulaton step for cellular automata\n\n\n    for (let i = 0; i < numberOfSimulations; i++) {\n      automataMap = this.automataSimulation(automataMap, birthLimit, deathLimit);\n    } //draw map using celluar automata results\n\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        let startingX = this.state.cellSize * x;\n        let startingY = this.state.cellSize * y;\n\n        if (automataMap[x][y] == 1) {\n          //alive\n          this.drawCell(this.canvasVis, startingX, startingY, \"#000000\");\n          this.fillCell(this.canvasVis, startingX, startingY, \"#95deb9\");\n          this.searchGrid[x][y] = 0;\n        } else {\n          // not alive\n          this.drawCell(this.canvasVis, startingX, startingY, \"#000000\");\n          this.fillCell(this.canvasVis, startingX, startingY, \"#357553\"); //updating search Grid\n\n          this.searchGrid[x][y] = 1;\n        }\n      }\n    }\n  }\n\n  automataSimulation(map, birthLimit, deathLimit) {\n    //initializing map array\n    let newMap = new Array(this.state.width).fill(0).map(() => new Array(this.state.height).fill(0)); //looping through map\n\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        let numOfAliveNeighbors = this.countAliveNeighbors(map, x, y);\n\n        if (map[x][y] == 1) {\n          if (numOfAliveNeighbors < deathLimit) {\n            newMap[x][y] = 0;\n          } else {\n            newMap[x][y] = 1;\n          }\n        } else {\n          if (numOfAliveNeighbors > birthLimit) {\n            newMap[x][y] = 1;\n          } else {\n            newMap[x][y] = 0;\n          }\n        }\n      }\n    }\n\n    return newMap;\n  }\n\n  countAliveNeighbors(map, x, y) {\n    let alive = 0;\n\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let xNeighbour = x + i;\n        let yNeighbour = y + j;\n\n        if (i == 0 && j == 0) {\n          continue;\n        }\n\n        if (xNeighbour >= 0 && yNeighbour >= 0 && xNeighbour < this.state.width && yNeighbour < this.state.height) {\n          if (map[xNeighbour][yNeighbour] == 1) {\n            alive++;\n          }\n        } else {\n          alive++;\n        }\n      }\n    }\n\n    return alive;\n  }\n\n  drawCell(canvasID, startX, startY, color) {\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, color);\n  }\n\n  drawLine(canvasID, start, end, color) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  } //filling cell using top left coordiinates x and y of cell\n\n\n  fillCell(canvasID, x, y, fillColor) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + this.state.cellSize, y);\n    ctx.lineTo(x + this.state.cellSize, y + this.state.cellSize);\n    ctx.lineTo(x, y + this.state.cellSize);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  pixelToCell(pixelX, pixelY) {\n    let row = Math.floor(pixelX / this.state.cellSize);\n    let column = Math.floor(pixelY / this.state.cellSize);\n    let cell = {\n      x: row,\n      y: column\n    };\n    return cell;\n  }\n\n  handleMouseClick(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column cell which correspondds to where user clicked\n\n    let cellClicked = this.pixelToCell(offsetX, offsetY);\n\n    if (this.state.gameMode == \"Path\") {\n      this.configurePath(cellClicked);\n    } else {\n      this.buildTerrain(cellClicked);\n    }\n  }\n\n  handleMouseHover(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column of cell which correspondds to where user hovered\n\n    let cellHovered = this.pixelToCell(offsetX, offsetY); //getting x and y pixel value for cell\n\n    let pixelXValue = cellHovered.x * this.state.cellSize;\n    let pixelYValue = cellHovered.y * this.state.cellSize; //clearing all cells on overlay canvas\n\n    let ctx = this.canvasOverlay.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //updating hovered cell\n\n    this.drawCell(this.canvasOverlay, pixelXValue, pixelYValue, \"#f7071f\");\n  } //method used to set start and goal position of path\n\n\n  configurePath(gridCell) {\n    let pixelX = gridCell.x * this.state.cellSize;\n    let pixelY = gridCell.y * this.state.cellSize;\n\n    if (this.startPosition == null) {\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#f7071f\");\n      this.startPosition = {\n        x: gridCell.x,\n        y: gridCell.y\n      };\n    } else if (this.goalPosition == null) {\n      //checking if position is same as start Location\n      let startPos = this.startPosition; //getting the type of terrain for start and goal position\n\n      let stGridColor = this.searchGrid[startPos.x][startPos.y];\n      let endGridColor = this.searchGrid[gridCell.x][gridCell.y];\n\n      if (!(gridCell.x == this.startPosition.x && gridCell.y == this.startPosition.y) && stGridColor == endGridColor) {\n        this.fillCell(this.canvasPath, pixelX, pixelY, \"#34eb52\");\n        this.goalPosition = {\n          x: gridCell.x,\n          y: gridCell.y\n        }; //find path to goal location\n\n        if (this.state.currentAlgorithm == \"bfs\" || this.state.currentAlgorithm == \"dfs\") {\n          this.depthBestSearch();\n        } else {\n          this.heuristicSearch();\n        }\n      }\n    } else {\n      // restarting goal and start position\n      //clearing all cells\n      let ctx = this.canvasPath.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //reseting start position and goal position\n\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#f7071f\");\n      this.goalPosition = null;\n      this.startPosition = {\n        x: gridCell.x,\n        y: gridCell.y\n      }; //reseting paramters for path finding\n\n      this.resetParameters();\n    }\n  }\n\n  buildTerrain(gridCell) {\n    let pixelX = gridCell.x * this.state.cellSize;\n    let pixelY = gridCell.y * this.state.cellSize; //checking to see if there is already this type of terrain on grid cell\n\n    if (this.searchGrid[gridCell.x][gridCell.y] == 0) {\n      //coloring cell to indicate terrain\n      this.fillCell(this.canvasVis, pixelX, pixelY, \"#357553\");\n      this.drawCell(this.canvasVis, pixelX, pixelY, \"#000000\"); //adding terrain to search grid so that we know where obstacles\n\n      this.searchGrid[gridCell.x][gridCell.y] = 1;\n    }\n  }\n\n  findPath(parentNode) {\n    let currentNode = parentNode;\n\n    while (currentNode.parent != null) {\n      let previousState = currentNode.parent;\n      this.path.push(currentNode.action); //finding node which corressponds to the parent node\n\n      for (let i = 0; i < this.closedNodes.length; i++) {\n        let previousNode = this.closedNodes[i];\n\n        if (previousNode.x == previousState[0] && previousNode.y == previousState[1]) {\n          currentNode = previousNode;\n          break;\n        }\n      }\n    }\n\n    this.path.reverse(); //drawing path to goal\n\n    this.drawPath();\n  }\n\n  drawPath() {\n    let currentPosition = this.startPosition; //looping through path actions\n\n    for (let i = 0; i < this.path.length; i++) {\n      let pathAction = this.path[i];\n      let newPositionX = currentPosition.x + pathAction[0];\n      let newPositionY = currentPosition.y + pathAction[1];\n      let pixelX = newPositionX * this.state.cellSize;\n      let pixelY = newPositionY * this.state.cellSize; //drawing Path\n\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#ffffff\"); //updating current Position\n\n      currentPosition = {\n        x: newPositionX,\n        y: newPositionY\n      };\n    }\n  }\n\n  containsElement(node, arr) {\n    let found = false;\n\n    for (let i = 0; i < arr.length; i++) {\n      let val = arr[i];\n\n      if (node.x == val.x && node.y == val.y) {\n        found = true;\n        break;\n      }\n    }\n\n    return found;\n  }\n\n  isActionLegal(node, action) {\n    let width = this.state.width;\n    let height = this.state.height;\n    let newX = node.x + action[0];\n    let newY = node.y + action[1];\n    let childNode = {\n      x: newX,\n      y: newY\n    };\n    let closedList = this.closedNodes;\n    let openList = this.openNodes;\n\n    if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n      //check if action will bring us outside map\n      return false;\n    } else if (this.containsElement(childNode, closedList)) {\n      //checking if action will lead to already expanded node\n      return false;\n    } else if (this.containsElement(childNode, openList)) {\n      // checking to see if action will lead to node in open list\n      return false;\n    } else if (this.searchGrid[node.x][node.y] != this.searchGrid[newX][newY]) {\n      //used to check if parent and child node generated from action is the same type of terrain or color.\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  isValidHeuristicAction(node, action) {\n    let width = this.state.width;\n    let height = this.state.height;\n    let newX = node.x + action[0];\n    let newY = node.y + action[1];\n    let childNode = {\n      x: newX,\n      y: newY\n    };\n    let closedList = this.closedNodes;\n\n    if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n      //check if action will bring us outside map\n      return false;\n    } else if (this.containsElement(childNode, closedList)) {\n      //checking if action will lead to already expanded node\n      return false;\n    } else if (this.searchGrid[node.x][node.y] != this.searchGrid[newX][newY]) {\n      //used to check if parent and child node generated from action is the same type of terrain or color.\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  estimateHeuristic(node, goal) {\n    let horizontalDistance = Math.abs(goal.x - node.x);\n    let verticalDistance = Math.abs(goal.y - node.y);\n    let distanceSquared = Math.pow(horizontalDistance, 2) + Math.pow(verticalDistance, 2);\n    return Math.sqrt(distanceSquared);\n  }\n\n  popMinCostNode() {\n    let minF = Infinity;\n    let minNode = null;\n    let nodeIndex = null;\n\n    for (let i = 0; i < this.openNodes.length; i++) {\n      let node = this.openNodes[i];\n      let fCost = node.g + node.h;\n\n      if (fCost < minF) {\n        minNode = node;\n        nodeIndex = i;\n        minF = fCost;\n      }\n    } //removing the min node from the list\n\n\n    this.openNodes.splice(nodeIndex, 1);\n    return minNode;\n  }\n\n  findNode(x, y, openList) {\n    for (let i = 0; i < openList.length; i++) {\n      let node = openList[i];\n\n      if (node.x == x && node.y == y) {\n        return node;\n      }\n    }\n  } //method used to perform best first search or depth first search\n\n\n  depthBestSearch() {\n    let startPosition = this.startPosition;\n    let rootNode = new TreeNode(startPosition.x, startPosition.y, null, null, null, null); //adding root node to open list\n\n    this.openNodes.push(rootNode);\n\n    while (this.openNodes.length != 0) {\n      //looping through open list until it is empty\n      let parentNode = this.state.currentAlgorithm == \"bfs\" ? this.openNodes.shift() : this.openNodes.pop();\n\n      for (let i = 0; i < this.allActions.length; i++) {\n        let action = this.allActions[i];\n        let isLegal = this.isActionLegal(parentNode, action);\n\n        if (isLegal) {\n          let childNodeX = action[0] + parentNode.x;\n          let childNodeY = action[1] + parentNode.y; //checking to see if we are at goal node\n\n          if (childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y) {\n            //finding Path\n            this.findPath(parentNode);\n          } //adding to open list\n\n\n          this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x, parentNode.y], null, null));\n        }\n      } //adding expanded parent node to closed list \n\n\n      this.closedNodes.push(parentNode);\n    }\n\n    if (this.path.length == 0 && this.openNodes.length == 0) {\n      //path could not be found\n      alert(\"Path could not be found!\"); //reseting start and goal position\n      //clearing all cells\n\n      let ctx = this.canvasPath.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //reseting start position and goal position\n\n      this.goalPosition = null;\n      this.startPosition = null; //reseting paramters for path finding\n\n      this.resetParameters();\n    }\n  }\n\n  heuristicSearch() {\n    //adding root node\n    let startPosition = this.startPosition;\n    let goalPosition = this.goalPosition;\n    let foundGoal = false;\n    let rootHeuristicCost = this.state.currentHeuristic == \"ucs\" ? 0 : this.estimateHeuristic(startPosition, goalPosition);\n    let rootNode = new TreeNode(startPosition.x, startPosition.y, [0, 0], null, 0, rootHeuristicCost);\n    this.openNodes.push(rootNode);\n\n    while (this.openNodes.length > 0 && !foundGoal) {\n      //looping through open list until it is empty\n      //finding node with the minimum f(n)\n      let parentNode = this.popMinCostNode();\n\n      for (let i = 0; i < this.allActions.length; i++) {\n        let action = this.allActions[i];\n        let isLegal = this.isValidHeuristicAction(parentNode, action);\n\n        if (isLegal) {\n          let childNodeX = action[0] + parentNode.x;\n          let childNodeY = action[1] + parentNode.y; //checking to see if we are at goal node\n\n          if (childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y) {\n            if (!foundGoal) {\n              this.findPath(parentNode);\n            }\n\n            foundGoal = true;\n          }\n\n          let childNode = {\n            x: childNodeX,\n            y: childNodeY\n          };\n          let gCost = this.state.currentHeuristic == \"gbfs\" ? 0 : parentNode.g + 100;\n          let hCost = this.state.currentHeuristic == \"ucs\" ? 0 : this.estimateHeuristic(childNode, goalPosition); //checking to see if there is same cell in open list with better G Cost\n\n          let node = this.findNode(childNodeX, childNodeY, this.openNodes);\n\n          if (node) {\n            //checking if other path is better than taking this current action\n            if (node.g <= gCost) {\n              continue;\n            }\n          } //adding to open list\n\n\n          this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x, parentNode.y], gCost, hCost));\n        }\n      } //adding expanded parent node to closed list \n\n\n      this.closedNodes.push(parentNode);\n    }\n\n    if (this.path.length == 0 && this.openNodes.length == 0) {\n      //path could not be found\n      alert(\"Path could not be found!\"); //reseting start and goal position\n      //clearing all cells\n\n      let ctx = this.canvasPath.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //reseting start position and goal position\n\n      this.goalPosition = null;\n      this.startPosition = null; //reseting paramters for path finding\n\n      this.resetParameters();\n    }\n  }\n\n  changeMode() {\n    if (this.state.gameMode == \"Path\") {\n      this.setState({\n        gameMode: \"Build\"\n      });\n    } else {\n      this.setState({\n        gameMode: \"Path\"\n      });\n    }\n  }\n\n  render() {\n    let gameMode = this.state.gameMode;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasVis => this.canvasVis = canvasVis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasPath => this.canvasPath = canvasPath,\n          onMouseDown: this.handleMouseClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasOverlay => this.canvasOverlay = canvasOverlay,\n          onMouseDown: this.handleMouseClick,\n          onMouseMove: this.handleMouseHover\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            marginTop: 10\n          },\n          children: \"Config/Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"creativeButton\",\n          onClick: this.changeMode,\n          children: gameMode == \"Path\" ? \"Path Mode\" : \"Build Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"maps\",\n          children: \"Choose Map:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"mapSelection\",\n          id: \"maps\",\n          name: \"maps\",\n          onChange: this.handleMapChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"default\",\n            children: \"Cave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"maze\",\n            children: \"Maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blank\",\n            children: \"Blank\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"algo\",\n          children: \"Choose a Path Finding Algorithm:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"algo\",\n          name: \"algo\",\n          onChange: this.handleAlgoChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bfs\",\n            children: \"Best First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dfs\",\n            children: \"Depth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"aStar\",\n            children: \"A* Search \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gbfs\",\n            children: \"Greedy Best-First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ucs\",\n            children: \"Uniform Cost Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js"],"names":["React","Component","ReactDom","TreeNode","constructor","x","y","action","parent","g","h","visualizer","props","handleAlgoChange","event","resetParameters","startPosition","goalPosition","ctx2","canvasPath","getContext","clearRect","state","canvasWidth","canvasHeight","target","value","setState","currentAlgorithm","currentHeuristic","handleMapChange","resetSearchGrid","ctx","canvasVis","drawAutomataMap","drawBlankMap","cellSize","width","height","gameMode","openNodes","closedNodes","path","searchGrid","allActions","mapCellularAutomata","handleMouseClick","bind","handleMouseHover","changeMode","componentDidMount","canvasOverlay","getCanvasPosition","initializeSearchGrid","Array","fill","map","canvasID","rect","getBoundingClientRect","canvasPosition","left","right","top","bottom","startingX","startingY","drawCell","fillCell","birthLimit","deathLimit","numberOfSimulations","automataMap","chanceToBeginAlive","Math","random","i","automataSimulation","newMap","numOfAliveNeighbors","countAliveNeighbors","alive","j","xNeighbour","yNeighbour","startX","startY","color","drawLine","start","end","beginPath","moveTo","strokeStyle","lineTo","stroke","closePath","fillColor","fillStyle","pixelToCell","pixelX","pixelY","row","floor","column","cell","e","offsetX","pageX","offsetY","pageY","cellClicked","configurePath","buildTerrain","cellHovered","pixelXValue","pixelYValue","gridCell","startPos","stGridColor","endGridColor","depthBestSearch","heuristicSearch","findPath","parentNode","currentNode","previousState","push","length","previousNode","reverse","drawPath","currentPosition","pathAction","newPositionX","newPositionY","containsElement","node","arr","found","val","isActionLegal","newX","newY","childNode","closedList","openList","isValidHeuristicAction","estimateHeuristic","goal","horizontalDistance","abs","verticalDistance","distanceSquared","pow","sqrt","popMinCostNode","minF","Infinity","minNode","nodeIndex","fCost","splice","findNode","rootNode","shift","pop","isLegal","childNodeX","childNodeY","alert","foundGoal","rootHeuristicCost","gCost","hCost","render","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\n\nclass TreeNode {\n    constructor(x, y, action, parent, g, h) {\n        this.x = x;\n        this.y = y;\n        this.action = action;\n        this.parent = parent;\n        this.g = g;\n        this.h = h;\n        \n    }\n   \n}\n\nexport default class visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellSize: 15,\n            width: 50,\n            height: 40,\n            canvasHeight: 15 * 40,\n            canvasWidth: 15 * 50,\n            gameMode: \"Path\",\n            currentAlgorithm: \"bfs\",\n            currentHeuristic: null\n        }\n\n        this.startPosition = null;\n        this.goalPosition = null;\n        this.openNodes = [];\n        this.closedNodes = [];\n        this.path = [];\n        this.searchGrid = [];\n        this.allActions = [[0,1],[1,0],[-1,0],[0,-1]];\n        this.mapCellularAutomata = [];\n\n        this.handleMouseClick = this.handleMouseClick.bind(this);\n        this.handleMouseHover = this.handleMouseHover.bind(this);\n        this.handleMapChange = this.handleMapChange.bind(this);\n        this.handleAlgoChange = this.handleAlgoChange.bind(this);\n        this.changeMode = this.changeMode.bind(this);\n    }\n\n    componentDidMount() {\n        //setting height and width of all canvas\n        this.canvasVis.width = this.state.canvasWidth;\n        this.canvasVis.height = this.state.canvasHeight;\n\n        this.canvasOverlay.width = this.state.canvasWidth;\n        this.canvasOverlay.height = this.state.canvasHeight;\n\n        this.canvasPath.width = this.state.canvasWidth;\n        this.canvasPath.height = this.state.canvasHeight;\n\n        this.getCanvasPosition(this.canvasOverlay);\n\n        //initializing search grid array\n        this.initializeSearchGrid();\n\n        //drawing default map\n        this.drawAutomataMap(3,4,5);\n    }\n\n    initializeSearchGrid() {\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        //initializing searchGrid with Zeros as 2D array widthxheight\n        this.searchGrid = new Array(width).fill(0).map(() => new Array(height).fill(0));\n\n    }\n\n    resetParameters() {\n        this.openNodes = [];\n        this.closedNodes = [];\n        this.path = [];\n    }\n\n    resetSearchGrid() {\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n                this.searchGrid[x][y] = 0;\n            }\n        }\n    }\n\n    getCanvasPosition(canvasID) {\n        let rect = canvasID.getBoundingClientRect();\n        this.setState({ canvasPosition: {left: rect.left, right: rect.right, top: rect.top, bottom: rect.bottom } });\n    }\n\n    drawBlankMap() {\n\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n                let startingX = this.state.cellSize * x;\n                let startingY = this.state.cellSize * y;\n                this.drawCell(this.canvasVis,startingX,startingY,\"#000000\");\n                this.fillCell(this.canvasVis,startingX,startingY,\"#95deb9\");\n            }\n        }\n    }\n\n    //method used to draw map using cellular automata\n    drawAutomataMap(birthLimit, deathLimit, numberOfSimulations) {\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        //initializing map array\n        let automataMap = new Array(width).fill(0).map(() => new Array(height).fill(0));\n\n        let chanceToBeginAlive = 0.40;\n\n        //randomly initializing chance for cell to be alive for game of life\n        for(let x = 0; x < width; x++){\n            for(let y = 0; y < height; y++){\n                if(Math.random() < chanceToBeginAlive){\n                    automataMap[x][y] = 1;\n                }\n            }\n        }\n\n        //run simulaton step for cellular automata\n        for(let i = 0; i < numberOfSimulations; i++){\n            automataMap = this.automataSimulation(automataMap,birthLimit,deathLimit);\n        }\n\n        //draw map using celluar automata results\n        for(let x = 0; x < width; x++){\n            for(let y = 0; y < height; y++){\n                let startingX = this.state.cellSize * x;\n                let startingY = this.state.cellSize * y;\n\n                if(automataMap[x][y] == 1){ //alive\n                    this.drawCell(this.canvasVis,startingX,startingY,\"#000000\");\n                    this.fillCell(this.canvasVis,startingX,startingY,\"#95deb9\");\n                    this.searchGrid[x][y] = 0;\n                }else{ // not alive\n                    this.drawCell(this.canvasVis,startingX,startingY,\"#000000\");\n                    this.fillCell(this.canvasVis,startingX,startingY,\"#357553\");\n\n                    //updating search Grid\n                    this.searchGrid[x][y] = 1;\n                }\n                \n            }\n        }\n\n        \n    }\n\n    automataSimulation(map,birthLimit,deathLimit) {\n\n        //initializing map array\n        let newMap = new Array(this.state.width).fill(0).map(() => new Array(this.state.height).fill(0));\n\n        //looping through map\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n\n                let numOfAliveNeighbors = this.countAliveNeighbors(map,x,y);\n\n                if(map[x][y] == 1){\n                    if(numOfAliveNeighbors < deathLimit){\n                        newMap[x][y] = 0;\n                    }else{\n                        newMap[x][y] = 1;\n                    }\n                }else{\n                    if(numOfAliveNeighbors > birthLimit){\n                        newMap[x][y] = 1;\n                    }else{\n                        newMap[x][y] = 0;\n                    }\n                }\n\n            }\n        }\n\n        return newMap;\n\n    }\n\n    countAliveNeighbors(map,x,y) {\n        \n        let alive = 0;\n\n        for(let i = -1; i<2; i++){\n            for(let j= -1; j<2; j++){\n\n                let xNeighbour = x+i;\n                let yNeighbour = y+j;\n                \n                if(i == 0 && j == 0){ continue; }\n\n                if( (xNeighbour >= 0 && yNeighbour >= 0) && (xNeighbour < this.state.width && yNeighbour < this.state.height) )\n                {\n                    if(map[xNeighbour][yNeighbour] == 1)\n                    {\n                        alive++;\n                    }\n                }else\n                {\n                    alive++;\n                }\n            }\n        }\n    \n        return alive;\n    }\n\n    drawCell(canvasID, startX, startY, color) {\n\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX + this.state.cellSize, y: startY}, color);\n        this.drawLine(canvasID,{x: startX + this.state.cellSize, y: startY},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY + this.state.cellSize},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX, y: startY + this.state.cellSize}, color);\n        \n    }\n\n    drawLine(canvasID, start, end, color) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.strokeStyle = color;\n        ctx.lineTo(end.x,end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    //filling cell using top left coordiinates x and y of cell\n    fillCell(canvasID, x, y, fillColor) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.fillStyle = fillColor;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x+this.state.cellSize,y);\n        ctx.lineTo(x+this.state.cellSize,y + this.state.cellSize);\n        ctx.lineTo(x,y + this.state.cellSize);\n        ctx.lineTo(x,y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    pixelToCell(pixelX,pixelY) {\n\n        let row = Math.floor(pixelX / this.state.cellSize);\n        let column = Math.floor(pixelY / this.state.cellSize);\n\n        let cell = {x : row, y: column};\n\n        return cell;\n\n    }\n\n    handleMouseClick(e) {\n        const {left, right, top, bottom } = this.state.canvasPosition;\n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column cell which correspondds to where user clicked\n        let cellClicked = this.pixelToCell(offsetX,offsetY);\n\n        if(this.state.gameMode == \"Path\"){\n            this.configurePath(cellClicked);\n        }else{\n            this.buildTerrain(cellClicked);\n        }\n\n    }\n\n    handleMouseHover(e) {\n        \n        const {left, right, top, bottom } = this.state.canvasPosition; \n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column of cell which correspondds to where user hovered\n        let cellHovered = this.pixelToCell(offsetX,offsetY);\n\n        //getting x and y pixel value for cell\n        let pixelXValue = cellHovered.x * this.state.cellSize;\n        let pixelYValue = cellHovered.y * this.state.cellSize;\n\n        //clearing all cells on overlay canvas\n        let ctx = this.canvasOverlay.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        //updating hovered cell\n        this.drawCell(this.canvasOverlay,pixelXValue,pixelYValue,\"#f7071f\");\n        \n    }\n\n    //method used to set start and goal position of path\n    configurePath(gridCell) {\n\n        let pixelX = gridCell.x * this.state.cellSize;\n        let pixelY = gridCell.y * this.state.cellSize;\n\n        if(this.startPosition == null){\n            this.fillCell(this.canvasPath,pixelX,pixelY,\"#f7071f\");\n            this.startPosition = {x: gridCell.x, y: gridCell.y};\n        }else if(this.goalPosition == null){\n            //checking if position is same as start Location\n            let startPos = this.startPosition;\n\n            //getting the type of terrain for start and goal position\n            let stGridColor = this.searchGrid[startPos.x][startPos.y];\n            let endGridColor = this.searchGrid[gridCell.x][gridCell.y];\n\n            if( !(gridCell.x == this.startPosition.x && gridCell.y == this.startPosition.y) && stGridColor == endGridColor ){\n                \n                this.fillCell(this.canvasPath,pixelX,pixelY,\"#34eb52\");\n                this.goalPosition = {x: gridCell.x, y: gridCell.y}; \n\n                //find path to goal location\n                if(this.state.currentAlgorithm == \"bfs\" || this.state.currentAlgorithm == \"dfs\"){\n                    this.depthBestSearch();\n                }else {\n                    this.heuristicSearch();\n                }\n                \n            }\n        }else{ // restarting goal and start position\n\n            //clearing all cells\n            let ctx = this.canvasPath.getContext(\"2d\");\n            ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n            //reseting start position and goal position\n            this.fillCell(this.canvasPath,pixelX,pixelY,\"#f7071f\");\n            this.goalPosition = null;\n            this.startPosition = {x: gridCell.x, y: gridCell.y};\n        \n            //reseting paramters for path finding\n            this.resetParameters();\n        }\n\n    }\n\n    buildTerrain(gridCell) {\n\n        let pixelX = gridCell.x * this.state.cellSize;\n        let pixelY = gridCell.y * this.state.cellSize;\n\n        //checking to see if there is already this type of terrain on grid cell\n        if(this.searchGrid[gridCell.x][gridCell.y] == 0){\n            //coloring cell to indicate terrain\n            this.fillCell(this.canvasVis,pixelX,pixelY,\"#357553\");\n            this.drawCell(this.canvasVis,pixelX,pixelY,\"#000000\");\n\n            //adding terrain to search grid so that we know where obstacles\n            this.searchGrid[gridCell.x][gridCell.y] = 1;\n\n        }\n\n        \n\n    }\n\n    findPath(parentNode){\n    \n        let currentNode = parentNode;\n\n        while (currentNode.parent != null){\n\n            let previousState = currentNode.parent;\n            this.path.push(currentNode.action);\n            //finding node which corressponds to the parent node\n            for(let i = 0; i < this.closedNodes.length; i++){\n                let previousNode = this.closedNodes[i];\n                if(previousNode.x == previousState[0] && previousNode.y == previousState[1]){\n                    currentNode = previousNode;\n                    break;\n                }\n\n            }\n        }\n\n        this.path.reverse();\n\n        //drawing path to goal\n        this.drawPath();\n        \n    }\n\n    drawPath() {\n       \n        let currentPosition = this.startPosition;\n        \n        //looping through path actions\n        for(let i = 0; i < this.path.length; i++){\n            let pathAction = this.path[i];\n\n            let newPositionX = currentPosition.x + pathAction[0];\n            let newPositionY = currentPosition.y + pathAction[1];\n\n            let pixelX = newPositionX * this.state.cellSize;\n            let pixelY = newPositionY * this.state.cellSize;\n\n            //drawing Path\n            this.fillCell(this.canvasPath, pixelX, pixelY, \"#ffffff\");\n\n            //updating current Position\n            currentPosition = {x: newPositionX, y: newPositionY};\n        }\n    }\n\n    containsElement(node,arr){\n        let found = false;\n\n        for(let i = 0; i < arr.length; i++){\n            \n            let val = arr[i];\n\n            if(node.x == val.x && node.y == val.y){\n                found = true;\n                break;\n            }\n        }\n\n        return found;      \n    }\n\n    isActionLegal(node, action){\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        let newX = node.x + action[0];\n        let newY = node.y + action[1];\n\n        let childNode = {x: newX, y: newY};\n       \n        let closedList = this.closedNodes;\n        let openList = this.openNodes;\n\n    \n        if( (newX < 0 || newY < 0) || (newX >= width || newY >= height ) ){ //check if action will bring us outside map\n            return false;\n        }else if(this.containsElement(childNode,closedList)){ //checking if action will lead to already expanded node\n            return false;\n        }else if(this.containsElement(childNode,openList)){ // checking to see if action will lead to node in open list\n            return false;\n        }else if(this.searchGrid[node.x][node.y] != this.searchGrid[newX][newY]){ //used to check if parent and child node generated from action is the same type of terrain or color.\n            return false;\n        }\n        else{\n            return true;\n        } \n\n    }\n\n    isValidHeuristicAction(node, action){\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        let newX = node.x + action[0];\n        let newY = node.y + action[1];\n\n        let childNode = {x: newX, y: newY};\n       \n        let closedList = this.closedNodes;\n    \n        if( (newX < 0 || newY < 0) || (newX >= width || newY >= height ) ){ //check if action will bring us outside map\n            return false;\n        }else if(this.containsElement(childNode,closedList)){ //checking if action will lead to already expanded node\n            return false;\n        }else if(this.searchGrid[node.x][node.y] != this.searchGrid[newX][newY]){ //used to check if parent and child node generated from action is the same type of terrain or color.\n            return false;\n        }else{\n            return true;\n        } \n\n    }\n\n    estimateHeuristic(node,goal){\n\n        let horizontalDistance = Math.abs(goal.x - node.x);\n        let verticalDistance =  Math.abs(goal.y - node.y);\n\n        let distanceSquared = Math.pow(horizontalDistance,2) + Math.pow(verticalDistance,2);\n\n        return Math.sqrt(distanceSquared);\n\n    }\n\n    popMinCostNode() {\n\n        let minF = Infinity;\n        let minNode = null;\n        let nodeIndex = null;\n\n        for(let i = 0; i < this.openNodes.length; i++){\n            let node = this.openNodes[i];\n\n            let fCost = node.g + node.h;\n\n            if( fCost < minF){\n                minNode = node;\n                nodeIndex = i;\n                minF = fCost;\n            }\n        }\n\n        //removing the min node from the list\n        this.openNodes.splice(nodeIndex,1);\n\n        return minNode;\n\n    }\n\n    findNode(x,y,openList){\n\n        for(let i = 0; i < openList.length; i++){\n            let node = openList[i];\n            if(node.x == x && node.y == y){\n                return node;\n            }\n        }\n    }\n\n    //method used to perform best first search or depth first search\n    depthBestSearch(){\n\n        let startPosition = this.startPosition;\n        let rootNode = new TreeNode(startPosition.x, startPosition.y,null,null,null,null);\n\n        //adding root node to open list\n        this.openNodes.push(rootNode);\n\n        while(this.openNodes.length != 0){ //looping through open list until it is empty\n            let parentNode = this.state.currentAlgorithm == \"bfs\" ? this.openNodes.shift() : this.openNodes.pop();\n            \n            for(let i = 0; i < this.allActions.length; i++){\n                let action = this.allActions[i];\n    \n                let isLegal = this.isActionLegal(parentNode,action);\n\n                if(isLegal){\n                    let childNodeX = action[0] + parentNode.x;\n                    let childNodeY = action[1] + parentNode.y;\n\n                    //checking to see if we are at goal node\n                    if(childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y){\n                        //finding Path\n                        this.findPath(parentNode);\n                    }\n\n                    //adding to open list\n                    this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x,parentNode.y],null,null));\n                }\n                \n            }\n\n            //adding expanded parent node to closed list \n            this.closedNodes.push(parentNode); \n        }\n\n        if(this.path.length == 0 && this.openNodes.length == 0){ //path could not be found\n            alert(\"Path could not be found!\");\n\n            //reseting start and goal position\n\n            //clearing all cells\n            let ctx = this.canvasPath.getContext(\"2d\");\n            ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n            //reseting start position and goal position\n            this.goalPosition = null;\n            this.startPosition = null;\n        \n            //reseting paramters for path finding\n            this.resetParameters();\n\n        }\n    }\n\n    heuristicSearch() {\n\n        //adding root node\n        let startPosition = this.startPosition;\n        let goalPosition = this.goalPosition;\n\n        let foundGoal = false;\n\n        let rootHeuristicCost = this.state.currentHeuristic == \"ucs\" ? 0 : this.estimateHeuristic(startPosition, goalPosition);\n       \n        let rootNode = new TreeNode(startPosition.x, startPosition.y,[0,0],null,0,rootHeuristicCost);\n        this.openNodes.push(rootNode);\n\n        while(this.openNodes.length > 0 && !foundGoal){ //looping through open list until it is empty\n            \n            //finding node with the minimum f(n)\n            let parentNode = this.popMinCostNode();\n            \n            for(let i = 0; i < this.allActions.length; i++){\n                let action = this.allActions[i];\n    \n                let isLegal = this.isValidHeuristicAction(parentNode,action);\n\n                if(isLegal){\n                    let childNodeX = action[0] + parentNode.x;\n                    let childNodeY = action[1] + parentNode.y;\n\n                    //checking to see if we are at goal node\n                    if(childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y){\n                        if(!foundGoal){\n                            this.findPath(parentNode);\n                        }\n                        foundGoal = true;\n                    }\n\n                    let childNode = {x: childNodeX, y: childNodeY};\n\n                    let gCost = this.state.currentHeuristic == \"gbfs\" ? 0 : parentNode.g + 100;\n                    let hCost = this.state.currentHeuristic == \"ucs\" ? 0 : this.estimateHeuristic(childNode,goalPosition);\n\n                    //checking to see if there is same cell in open list with better G Cost\n                    let node = this.findNode(childNodeX,childNodeY,this.openNodes);\n                    if(node){\n                        //checking if other path is better than taking this current action\n                        if(node.g <= gCost){\n                            continue;\n                        }\n                    }\n\n                    //adding to open list\n                    this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x,parentNode.y],gCost,hCost));\n                }\n                \n            }\n\n            //adding expanded parent node to closed list \n            this.closedNodes.push(parentNode); \n        }\n\n        if(this.path.length == 0 && this.openNodes.length == 0){ //path could not be found\n            alert(\"Path could not be found!\");\n\n            //reseting start and goal position\n\n            //clearing all cells\n            let ctx = this.canvasPath.getContext(\"2d\");\n            ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n            //reseting start position and goal position\n            this.goalPosition = null;\n            this.startPosition = null;\n        \n            //reseting paramters for path finding\n            this.resetParameters();\n\n        }\n    }\n\n    handleAlgoChange = (event) => {\n\n\n        this.resetParameters();\n\n        //reseting start and goal position as well\n        this.startPosition = null;\n        this.goalPosition = null;\n\n        //reseting canvas which draws path\n        let ctx2 = this.canvasPath.getContext(\"2d\");\n        ctx2.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n\n        if(event.target.value == \"bfs\"){\n            this.setState({ currentAlgorithm: \"bfs\"});\n        }else if(event.target.value == \"dfs\"){\n            this.setState({ currentAlgorithm: \"dfs\"})\n        }else{ //A* star\n            this.setState({ currentAlgorithm: \"heuristic\"});\n\n            if(event.target.value == \"ucs\"){\n                this.setState({ currentHeuristic: \"ucs\" });\n            }else if(event.target.value == \"gbfs\"){\n                this.setState({ currentHeuristic: \"gbfs\" });\n            }else{\n                this.setState({ currentHeuristic: \"aStar\" });\n            }\n        }\n       \n    }\n\n    handleMapChange = (event) => {\n\n        //reseting search Grid\n        this.resetSearchGrid();\n\n        this.resetParameters();\n\n        //reseting start and goal position as well\n        this.startPosition = null;\n        this.goalPosition = null;\n\n        //reseting base map and path map\n        let ctx = this.canvasVis.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        let ctx2 = this.canvasPath.getContext(\"2d\");\n        ctx2.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        if(event.target.value == \"default\"){\n            this.drawAutomataMap(3,4,5);\n        }else if(event.target.value == \"maze\"){ //drawing a more dense map\n            this.drawAutomataMap(3,1,1);\n        }else{ // blank map\n            this.drawBlankMap();\n        }\n       \n    }\n\n    changeMode() {\n\n        if(this.state.gameMode == \"Path\"){\n            this.setState({ gameMode: \"Build\"});\n        }else{\n            this.setState({ gameMode: \"Path\"});\n        }\n    }\n\n\n\n\n\n    render() {\n        let gameMode = this.state.gameMode;\n\n        return (\n            <div className=\"main\">\n                <div>\n                    <canvas ref={ canvasVis => this.canvasVis = canvasVis}></canvas>\n                    <canvas ref={ canvasPath => this.canvasPath = canvasPath} onMouseDown = {this.handleMouseClick}></canvas>\n                    <canvas ref={ canvasOverlay => this.canvasOverlay = canvasOverlay} onMouseDown = {this.handleMouseClick} onMouseMove = {this.handleMouseHover} ></canvas>\n                </div>\n                \n\n                <div className=\"controls\">\n                    <h1 style={{ marginTop: 10}}>Config/Controls</h1>\n                    <button className=\"creativeButton\" onClick={this.changeMode}>{gameMode == \"Path\" ? \"Path Mode\" : \"Build Mode\"}</button>\n\n                    <label for=\"maps\">Choose Map:</label>\n                    <select className=\"mapSelection\" id=\"maps\" name=\"maps\" onChange={this.handleMapChange}>\n                        <option value=\"default\">Cave</option>\n                        <option value=\"maze\">Maze</option>\n                        <option value=\"blank\">Blank</option>\n                    </select>\n                    \n                    <label for=\"algo\">Choose a Path Finding Algorithm:</label>\n                    <select id=\"algo\" name=\"algo\" onChange={this.handleAlgoChange}>\n                        <option value=\"bfs\">Best First Search</option>\n                        <option value=\"dfs\">Depth First Search</option>\n                        <option value=\"aStar\">A* Search </option>\n                        <option value=\"gbfs\">Greedy Best-First Search</option>\n                        <option value=\"ucs\">Uniform Cost Search</option>\n                    </select>\n                    \n                </div>\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}