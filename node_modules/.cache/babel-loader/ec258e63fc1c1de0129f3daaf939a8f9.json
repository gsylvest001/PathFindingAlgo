{"ast":null,"code":"var _jsxFileName = \"/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TreeNode {\n  constructor(x, y, action, parent) {\n    this.x = x;\n    this.y = y;\n    this.action = action;\n    this.parent = parent;\n  }\n\n}\n\nexport default class visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAlgoChange = event => {\n      console.log(event.target.value);\n    };\n\n    this.handleMapChange = event => {\n      console.log(event.target.value);\n    };\n\n    this.state = {\n      cellSize: 15,\n      width: 50,\n      height: 40,\n      canvasHeight: 15 * 40,\n      canvasWidth: 15 * 50,\n      gameMode: \"Path\"\n    };\n    this.startPosition = null;\n    this.goalPosition = null;\n    this.openNodes = [];\n    this.closedNodes = [];\n    this.path = [];\n    this.searchGrid = [];\n    this.allActions = [[0, 1], [1, 0], [-1, 0], [0, -1]];\n    this.handleMouseClick = this.handleMouseClick.bind(this);\n    this.handleMouseHover = this.handleMouseHover.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n  }\n\n  componentDidMount() {\n    //setting height and width of all canvas\n    this.canvasVis.width = this.state.canvasWidth;\n    this.canvasVis.height = this.state.canvasHeight;\n    this.canvasOverlay.width = this.state.canvasWidth;\n    this.canvasOverlay.height = this.state.canvasHeight;\n    this.canvasPath.width = this.state.canvasWidth;\n    this.canvasPath.height = this.state.canvasHeight;\n    this.getCanvasPosition(this.canvasOverlay); //initializing search grid array\n\n    this.initializeSearchGrid(); //drawing all cells for base canvas\n\n    this.drawMap();\n  }\n\n  initializeSearchGrid() {\n    let width = this.state.width;\n    let height = this.state.height; //setting grid width\n\n    this.searchGrid.length = width; //temp array used to sett height of search grid\n\n    let tempArr = [];\n    tempArr.length = height;\n\n    for (let x = 0; x < width; x++) {\n      this.searchGrid[x] = tempArr;\n    } //initializing all values with 0\n\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        this.searchGrid[x][y] = 0;\n      }\n    }\n  }\n\n  resetParameters() {\n    this.openNodes = [];\n    this.closedNodes = [];\n    this.path = [];\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  } //method used to draw all the cells for canvas\n\n\n  drawMap() {\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        let startingX = this.state.cellSize * x;\n        let startingY = this.state.cellSize * y;\n        this.drawCell(this.canvasVis, startingX, startingY, \"#7a7a7a\");\n      }\n    }\n  }\n\n  drawCell(canvasID, startX, startY, color) {\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, color);\n  }\n\n  drawLine(canvasID, start, end, color) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  } //filling cell using top left coordiinates x and y of cell\n\n\n  fillCell(canvasID, x, y, fillColor) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + this.state.cellSize, y);\n    ctx.lineTo(x + this.state.cellSize, y + this.state.cellSize);\n    ctx.lineTo(x, y + this.state.cellSize);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  pixelToCell(pixelX, pixelY) {\n    let row = Math.floor(pixelX / this.state.cellSize);\n    let column = Math.floor(pixelY / this.state.cellSize);\n    let cell = {\n      x: row,\n      y: column\n    };\n    return cell;\n  }\n\n  handleMouseClick(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column cell which correspondds to where user clicked\n\n    let cellClicked = this.pixelToCell(offsetX, offsetY);\n    let pixelX = cellClicked.x * this.state.cellSize;\n    let pixelY = cellClicked.y * this.state.cellSize;\n\n    if (this.state.gameMode == \"Path\") {\n      this.configurePath(cellClicked);\n    } else {\n      this.buildTerrain(cellClicked);\n    }\n  }\n\n  handleMouseHover(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column of cell which correspondds to where user hovered\n\n    let cellHovered = this.pixelToCell(offsetX, offsetY); //getting x and y pixel value for cell\n\n    let pixelXValue = cellHovered.x * this.state.cellSize;\n    let pixelYValue = cellHovered.y * this.state.cellSize; //clearing all cells on overlay canvas\n\n    let ctx = this.canvasOverlay.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //updating hovered cell\n\n    this.drawCell(this.canvasOverlay, pixelXValue, pixelYValue, \"#f7071f\");\n  } //method used to set start and goal position of path\n\n\n  configurePath(gridCell) {\n    let pixelX = gridCell.x * this.state.cellSize;\n    let pixelY = gridCell.y * this.state.cellSize;\n\n    if (this.startPosition == null) {\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#f7071f\");\n      this.startPosition = {\n        x: gridCell.x,\n        y: gridCell.y\n      };\n    } else if (this.goalPosition == null) {\n      //checking if position is same as start Location\n      if (gridCell.x != this.startPosition.x && gridCell.y != this.startPosition.y) {\n        this.fillCell(this.canvasPath, pixelX, pixelY, \"#34eb52\");\n        this.goalPosition = {\n          x: gridCell.x,\n          y: gridCell.y\n        }; //find path to goal location\n\n        this.bfs();\n      }\n    } else {\n      // restarting goal and start position\n      //clearing all cells\n      let ctx = this.canvasPath.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //reseting start position and goal position\n\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#f7071f\");\n      this.goalPosition = null;\n      this.startPosition = {\n        x: gridCell.x,\n        y: gridCell.y\n      }; //reseting paramters for path finding\n\n      this.resetParameters();\n    }\n  }\n\n  buildTerrain(gridCell) {\n    let pixelX = gridCell.x * this.state.cellSize;\n    let pixelY = gridCell.y * this.state.cellSize; //coloring cell to indicate terrain\n\n    this.fillCell(this.canvasPath, pixelX, pixelY, \"#15520c\"); //adding terrain to search grid so that we know where obstacles\n\n    this.searchGrid[gridCell.x][gridCell.y] = 1;\n  }\n\n  findPath(action, parentNode) {\n    let currentNode = parentNode;\n\n    while (currentNode.parent != null) {\n      let previousState = currentNode.parent;\n      this.path.push(currentNode.action); //finding node which corressponds to the parent node\n\n      for (let i = 0; i < this.closedNodes.length; i++) {\n        let previousNode = this.closedNodes[i];\n\n        if (previousNode.x == previousState[0] && previousNode.y == previousState[1]) {\n          currentNode = previousNode;\n          break;\n        }\n      }\n    }\n\n    this.path.reverse(); //drawing path to goal\n\n    this.drawPath();\n  }\n\n  drawPath() {\n    let currentPosition = this.startPosition; //looping through path actions\n\n    for (let i = 0; i < this.path.length; i++) {\n      let pathAction = this.path[i];\n      let newPositionX = currentPosition.x + pathAction[0];\n      let newPositionY = currentPosition.y + pathAction[1];\n      let pixelX = newPositionX * this.state.cellSize;\n      let pixelY = newPositionY * this.state.cellSize; //drawing Path\n\n      this.fillCell(this.canvasPath, pixelX, pixelY, \"#ffffff\"); //updating current Position\n\n      currentPosition = {\n        x: newPositionX,\n        y: newPositionY\n      };\n    }\n  }\n\n  containsElement(node, arr) {\n    let found = false;\n\n    for (let i = 0; i < arr.length; i++) {\n      let val = arr[i];\n\n      if (node.x == val.x && node.y == val.y) {\n        found = true;\n        break;\n      }\n    }\n\n    return found;\n  }\n\n  isActionLegal(node, action) {\n    let width = this.state.width;\n    let height = this.state.height;\n    let newX = node.x + action[0];\n    let newY = node.y + action[1];\n    let childNode = {\n      x: newX,\n      y: newY\n    };\n    let closedList = this.closedNodes;\n    let openList = this.openNodes;\n    let gridValue = this.searchGrid[childNode.x][childNode.y];\n    console.log(gridValue);\n\n    if (childNode.x < 0 || childNode.y < 0 || childNode.x > width || childNode.y > height) {\n      //check if action will bring us outside map\n      return false;\n    } else if (this.containsElement(childNode, closedList)) {\n      //checking if action will lead to already expanded node\n      return false;\n    } else if (this.containsElement(childNode, openList)) {\n      // checking to see if action will lead to node in open list\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  bfs() {\n    let startPosition = this.startPosition;\n    let rootNode = new TreeNode(startPosition.x, startPosition.y, null, null); //adding root node to open list\n\n    this.openNodes.push(rootNode);\n\n    while (this.openNodes.length != 0) {\n      //looping through open list until it is empty\n      let parentNode = this.openNodes.shift();\n\n      for (let i = 0; i < this.allActions.length; i++) {\n        let action = this.allActions[i];\n        let isLegal = this.isActionLegal(parentNode, action);\n\n        if (isLegal) {\n          let childNodeX = action[0] + parentNode.x;\n          let childNodeY = action[1] + parentNode.y; //checking to see if we are at goal node\n\n          if (childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y) {\n            //finding Path\n            this.findPath(action, parentNode);\n          } //adding to open list\n\n\n          this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x, parentNode.y]));\n        }\n      } //adding expanded parent node to closed list \n\n\n      this.closedNodes.push(parentNode);\n    }\n  }\n\n  dfs() {\n    let startPosition = this.startPosition;\n    let rootNode = new TreeNode(startPosition.x, startPosition.y, null, null); //adding root node to open list\n\n    this.openNodes.push(rootNode);\n\n    while (this.openNodes.length != 0) {\n      //looping through open list until it is empty\n      let parentNode = this.openNodes.pop();\n\n      for (let i = 0; i < this.allActions.length; i++) {\n        let action = this.allActions[i];\n        let isLegal = this.isActionLegal(parentNode, action);\n\n        if (isLegal) {\n          let childNodeX = action[0] + parentNode.x;\n          let childNodeY = action[1] + parentNode.y; //checking to see if we are at goal node\n\n          if (childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y) {\n            //finding Path\n            this.findPath(action, parentNode);\n          } //adding to open list\n\n\n          this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x, parentNode.y]));\n        }\n      } //adding expanded parent node to closed list \n\n\n      this.closedNodes.push(parentNode);\n    }\n  }\n\n  changeMode() {\n    if (this.state.gameMode == \"Path\") {\n      this.setState({\n        gameMode: \"Build\"\n      });\n    } else {\n      this.setState({\n        gameMode: \"Path\"\n      });\n    }\n  }\n\n  render() {\n    let gameMode = this.state.gameMode;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasVis => this.canvasVis = canvasVis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasPath => this.canvasPath = canvasPath,\n          onMouseDown: this.handleMouseClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasOverlay => this.canvasOverlay = canvasOverlay,\n          onMouseDown: this.handleMouseClick,\n          onMouseMove: this.handleMouseHover\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            marginTop: 10\n          },\n          children: \"Config/Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"creativeButton\",\n          onClick: this.changeMode,\n          children: gameMode == \"Path\" ? \"Path Mode\" : \"Build Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"maps\",\n          children: \"Choose Map:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"mapSelection\",\n          id: \"maps\",\n          name: \"maps\",\n          onChange: this.handleMapChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"default\",\n            children: \"Default\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"maze\",\n            children: \"Maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blank\",\n            children: \"Blank\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"algo\",\n          children: \"Choose a Path Finding Algorithm:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"algo\",\n          name: \"algo\",\n          onChange: this.handleAlgoChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bfs\",\n            children: \"BFS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dfs\",\n            children: \"DFS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"aStar\",\n            children: \"A * \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js"],"names":["React","Component","ReactDom","TreeNode","constructor","x","y","action","parent","visualizer","props","handleAlgoChange","event","console","log","target","value","handleMapChange","state","cellSize","width","height","canvasHeight","canvasWidth","gameMode","startPosition","goalPosition","openNodes","closedNodes","path","searchGrid","allActions","handleMouseClick","bind","handleMouseHover","changeMode","componentDidMount","canvasVis","canvasOverlay","canvasPath","getCanvasPosition","initializeSearchGrid","drawMap","length","tempArr","resetParameters","canvasID","rect","getBoundingClientRect","setState","canvasPosition","left","right","top","bottom","startingX","startingY","drawCell","startX","startY","color","drawLine","start","end","ctx","getContext","beginPath","moveTo","strokeStyle","lineTo","stroke","closePath","fillCell","fillColor","fillStyle","fill","pixelToCell","pixelX","pixelY","row","Math","floor","column","cell","e","offsetX","pageX","offsetY","pageY","cellClicked","configurePath","buildTerrain","cellHovered","pixelXValue","pixelYValue","clearRect","gridCell","bfs","findPath","parentNode","currentNode","previousState","push","i","previousNode","reverse","drawPath","currentPosition","pathAction","newPositionX","newPositionY","containsElement","node","arr","found","val","isActionLegal","newX","newY","childNode","closedList","openList","gridValue","rootNode","shift","isLegal","childNodeX","childNodeY","dfs","pop","render","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\n\nclass TreeNode {\n    constructor(x, y, action, parent) {\n        this.x = x;\n        this.y = y;\n        this.action = action;\n        this.parent = parent;\n    }\n}\n\nexport default class visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellSize: 15,\n            width: 50,\n            height: 40,\n            canvasHeight: 15 * 40,\n            canvasWidth: 15 * 50,\n            gameMode: \"Path\"\n        }\n\n        this.startPosition = null;\n        this.goalPosition = null;\n        this.openNodes = [];\n        this.closedNodes = [];\n        this.path = [];\n        this.searchGrid = [];\n        this.allActions = [[0,1],[1,0],[-1,0],[0,-1]]\n\n        this.handleMouseClick = this.handleMouseClick.bind(this);\n        this.handleMouseHover = this.handleMouseHover.bind(this);\n        this.changeMode = this.changeMode.bind(this);\n    }\n\n    componentDidMount() {\n        //setting height and width of all canvas\n        this.canvasVis.width = this.state.canvasWidth;\n        this.canvasVis.height = this.state.canvasHeight;\n\n        this.canvasOverlay.width = this.state.canvasWidth;\n        this.canvasOverlay.height = this.state.canvasHeight;\n\n        this.canvasPath.width = this.state.canvasWidth;\n        this.canvasPath.height = this.state.canvasHeight;\n\n        this.getCanvasPosition(this.canvasOverlay);\n\n        //initializing search grid array\n        this.initializeSearchGrid();\n\n        //drawing all cells for base canvas\n        this.drawMap();\n    }\n\n    initializeSearchGrid() {\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        //setting grid width\n        this.searchGrid.length = width;\n\n        //temp array used to sett height of search grid\n        let tempArr = [];\n        tempArr.length = height;\n\n        for(let x = 0; x < width; x++){\n            this.searchGrid[x] = tempArr;\n        }\n\n        //initializing all values with 0\n        for(let x = 0; x < width; x++){\n            for(let y = 0; y < height; y++){\n                this.searchGrid[x][y] = 0;\n            }\n        }\n    }\n\n    resetParameters() {\n        this.openNodes = [];\n        this.closedNodes = [];\n        this.path = [];\n    }\n\n    getCanvasPosition(canvasID) {\n        let rect = canvasID.getBoundingClientRect();\n        this.setState({ canvasPosition: {left: rect.left, right: rect.right, top: rect.top, bottom: rect.bottom } });\n    }\n\n    //method used to draw all the cells for canvas\n    drawMap() {\n\n        for(let x = 0; x < this.state.width; x++){\n            for(let y = 0; y < this.state.height; y++){\n                let startingX = this.state.cellSize * x;\n                let startingY = this.state.cellSize * y;\n                this.drawCell(this.canvasVis,startingX,startingY,\"#7a7a7a\");\n            }\n        }\n    }\n\n    drawCell(canvasID, startX, startY, color) {\n\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX + this.state.cellSize, y: startY}, color);\n        this.drawLine(canvasID,{x: startX + this.state.cellSize, y: startY},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY + this.state.cellSize},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX, y: startY + this.state.cellSize}, color);\n        \n    }\n\n    drawLine(canvasID, start, end, color) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.strokeStyle = color;\n        ctx.lineTo(end.x,end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    //filling cell using top left coordiinates x and y of cell\n    fillCell(canvasID, x, y, fillColor) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.fillStyle = fillColor;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x+this.state.cellSize,y);\n        ctx.lineTo(x+this.state.cellSize,y + this.state.cellSize);\n        ctx.lineTo(x,y + this.state.cellSize);\n        ctx.lineTo(x,y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    pixelToCell(pixelX,pixelY) {\n\n        let row = Math.floor(pixelX / this.state.cellSize);\n        let column = Math.floor(pixelY / this.state.cellSize);\n\n        let cell = {x : row, y: column};\n\n        return cell;\n\n    }\n\n    handleMouseClick(e) {\n        const {left, right, top, bottom } = this.state.canvasPosition;\n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column cell which correspondds to where user clicked\n        let cellClicked = this.pixelToCell(offsetX,offsetY);\n\n        let pixelX = cellClicked.x * this.state.cellSize;\n        let pixelY = cellClicked.y * this.state.cellSize;\n\n        if(this.state.gameMode == \"Path\"){\n            this.configurePath(cellClicked);\n        }else{\n            this.buildTerrain(cellClicked);\n        }\n\n    }\n\n    handleMouseHover(e) {\n        \n        const {left, right, top, bottom } = this.state.canvasPosition; \n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column of cell which correspondds to where user hovered\n        let cellHovered = this.pixelToCell(offsetX,offsetY);\n\n        //getting x and y pixel value for cell\n        let pixelXValue = cellHovered.x * this.state.cellSize;\n        let pixelYValue = cellHovered.y * this.state.cellSize;\n\n        //clearing all cells on overlay canvas\n        let ctx = this.canvasOverlay.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        //updating hovered cell\n        this.drawCell(this.canvasOverlay,pixelXValue,pixelYValue,\"#f7071f\");\n        \n    }\n\n    //method used to set start and goal position of path\n    configurePath(gridCell) {\n\n        let pixelX = gridCell.x * this.state.cellSize;\n        let pixelY = gridCell.y * this.state.cellSize;\n\n        if(this.startPosition == null){\n            this.fillCell(this.canvasPath,pixelX,pixelY,\"#f7071f\");\n            this.startPosition = {x: gridCell.x, y: gridCell.y};\n        }else if(this.goalPosition == null){\n            //checking if position is same as start Location\n            if(gridCell.x != this.startPosition.x && gridCell.y != this.startPosition.y){\n                this.fillCell(this.canvasPath,pixelX,pixelY,\"#34eb52\");\n                this.goalPosition = {x: gridCell.x, y: gridCell.y}; \n            \n                //find path to goal location\n                this.bfs();\n            }\n        }else{ // restarting goal and start position\n\n            //clearing all cells\n            let ctx = this.canvasPath.getContext(\"2d\");\n            ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n            //reseting start position and goal position\n            this.fillCell(this.canvasPath,pixelX,pixelY,\"#f7071f\");\n            this.goalPosition = null;\n            this.startPosition = {x: gridCell.x, y: gridCell.y};\n        \n            //reseting paramters for path finding\n            this.resetParameters();\n        }\n\n    }\n\n    buildTerrain(gridCell) {\n\n        let pixelX = gridCell.x * this.state.cellSize;\n        let pixelY = gridCell.y * this.state.cellSize;\n\n        //coloring cell to indicate terrain\n        this.fillCell(this.canvasPath,pixelX,pixelY,\"#15520c\");\n\n        //adding terrain to search grid so that we know where obstacles\n        this.searchGrid[gridCell.x][gridCell.y] = 1;\n\n    }\n\n    findPath(action, parentNode){\n    \n        let currentNode = parentNode;\n\n        while (currentNode.parent != null){\n\n            let previousState = currentNode.parent;\n            this.path.push(currentNode.action);\n            //finding node which corressponds to the parent node\n            for(let i = 0; i < this.closedNodes.length; i++){\n                let previousNode = this.closedNodes[i];\n                if(previousNode.x == previousState[0] && previousNode.y == previousState[1]){\n                    currentNode = previousNode;\n                    break;\n                }\n\n            }\n        }\n\n        this.path.reverse();\n\n        //drawing path to goal\n        this.drawPath();\n        \n    }\n\n    drawPath() {\n       \n        let currentPosition = this.startPosition;\n        \n        //looping through path actions\n        for(let i = 0; i < this.path.length; i++){\n            let pathAction = this.path[i];\n\n            let newPositionX = currentPosition.x + pathAction[0];\n            let newPositionY = currentPosition.y + pathAction[1];\n\n            let pixelX = newPositionX * this.state.cellSize;\n            let pixelY = newPositionY * this.state.cellSize;\n\n            //drawing Path\n            this.fillCell(this.canvasPath, pixelX, pixelY, \"#ffffff\");\n\n            //updating current Position\n            currentPosition = {x: newPositionX, y: newPositionY};\n        }\n    }\n\n    containsElement(node,arr){\n        let found = false;\n\n        for(let i = 0; i < arr.length; i++){\n            \n            let val = arr[i];\n\n            if(node.x == val.x && node.y == val.y){\n                found = true;\n                break;\n            }\n        }\n\n        return found;      \n    }\n\n    isActionLegal(node, action){\n\n        let width = this.state.width;\n        let height = this.state.height;\n\n        let newX = node.x + action[0];\n        let newY = node.y + action[1];\n\n        let childNode = {x: newX, y: newY};\n       \n        let closedList = this.closedNodes;\n        let openList = this.openNodes;\n\n        let gridValue = this.searchGrid[childNode.x][childNode.y];\n        console.log(gridValue);\n\n        if( (childNode.x < 0 || childNode.y < 0) || (childNode.x > width || childNode.y > height ) ){ //check if action will bring us outside map\n            return false;\n        }else if(this.containsElement(childNode,closedList)){ //checking if action will lead to already expanded node\n            return false;\n        }else if(this.containsElement(childNode,openList)){ // checking to see if action will lead to node in open list\n            return false;\n        }else{\n            return true;\n        } \n\n    }\n\n    bfs(){\n\n        let startPosition = this.startPosition;\n        let rootNode = new TreeNode(startPosition.x, startPosition.y,null,null);\n\n        //adding root node to open list\n        this.openNodes.push(rootNode);\n\n        while(this.openNodes.length != 0){ //looping through open list until it is empty\n            let parentNode = this.openNodes.shift();\n\n            for(let i = 0; i < this.allActions.length; i++){\n                let action = this.allActions[i];\n    \n                let isLegal = this.isActionLegal(parentNode,action);\n\n                if(isLegal){\n                    let childNodeX = action[0] + parentNode.x;\n                    let childNodeY = action[1] + parentNode.y;\n\n                    //checking to see if we are at goal node\n                    if(childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y){\n                        //finding Path\n                        this.findPath(action, parentNode);\n                    }\n\n                    //adding to open list\n                    this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x,parentNode.y]));\n                }\n            }\n\n            //adding expanded parent node to closed list \n            this.closedNodes.push(parentNode);\n        }\n    }\n\n    dfs(){\n\n        let startPosition = this.startPosition;\n        let rootNode = new TreeNode(startPosition.x, startPosition.y,null,null);\n\n        //adding root node to open list\n        this.openNodes.push(rootNode);\n\n        while(this.openNodes.length != 0){ //looping through open list until it is empty\n            let parentNode = this.openNodes.pop();\n\n            for(let i = 0; i < this.allActions.length; i++){\n                let action = this.allActions[i];\n    \n                let isLegal = this.isActionLegal(parentNode,action);\n\n                if(isLegal){\n                    let childNodeX = action[0] + parentNode.x;\n                    let childNodeY = action[1] + parentNode.y;\n\n                    //checking to see if we are at goal node\n                    if(childNodeX == this.goalPosition.x && childNodeY == this.goalPosition.y){\n                        //finding Path\n                        this.findPath(action, parentNode);\n                    }\n\n                    //adding to open list\n                    this.openNodes.push(new TreeNode(childNodeX, childNodeY, action, [parentNode.x,parentNode.y]));\n                }\n            }\n\n            //adding expanded parent node to closed list \n            this.closedNodes.push(parentNode);\n        }\n    }\n\n    handleAlgoChange = (event) => {\n        console.log(event.target.value);\n    }\n\n    handleMapChange = (event) => {\n        console.log(event.target.value);\n    }\n\n    changeMode() {\n\n        if(this.state.gameMode == \"Path\"){\n            this.setState({ gameMode: \"Build\"});\n        }else{\n            this.setState({ gameMode: \"Path\"});\n        }\n    }\n\n\n\n\n\n    render() {\n        let gameMode = this.state.gameMode;\n\n        return (\n            <div className=\"main\">\n                <div>\n                    <canvas ref={ canvasVis => this.canvasVis = canvasVis}></canvas>\n                    <canvas ref={ canvasPath => this.canvasPath = canvasPath} onMouseDown = {this.handleMouseClick}></canvas>\n                    <canvas ref={ canvasOverlay => this.canvasOverlay = canvasOverlay} onMouseDown = {this.handleMouseClick} onMouseMove = {this.handleMouseHover} ></canvas>\n                </div>\n                \n\n                <div className=\"controls\">\n                    <h1 style={{ marginTop: 10}}>Config/Controls</h1>\n                    <button className=\"creativeButton\" onClick={this.changeMode}>{gameMode == \"Path\" ? \"Path Mode\" : \"Build Mode\"}</button>\n\n                    <label for=\"maps\">Choose Map:</label>\n                    <select className=\"mapSelection\" id=\"maps\" name=\"maps\" onChange={this.handleMapChange}>\n                        <option value=\"default\">Default</option>\n                        <option value=\"maze\">Maze</option>\n                        <option value=\"blank\">Blank</option>\n                    </select>\n                    \n                    <label for=\"algo\">Choose a Path Finding Algorithm:</label>\n                    <select id=\"algo\" name=\"algo\" onChange={this.handleAlgoChange}>\n                        <option value=\"bfs\">BFS</option>\n                        <option value=\"dfs\">DFS</option>\n                        <option value=\"aStar\">A * </option>\n                    </select>\n                    \n                </div>\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}