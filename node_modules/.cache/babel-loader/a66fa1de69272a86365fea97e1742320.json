{"ast":null,"code":"var _jsxFileName = \"/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cellSize: 15,\n      rows: 50,\n      columns: 40,\n      canvasHeight: 15 * 40,\n      canvasWidth: 15 * 50,\n      currentHoverCell: null\n    };\n    this.handleMouseClick = this.handleMouseClick.bind(this);\n    this.handleMouseHover = this.handleMouseHover.bind(this);\n  }\n\n  componentDidMount() {\n    //setting height and width of both canvas\n    this.canvasVis.width = this.state.canvasWidth;\n    this.canvasVis.height = this.state.canvasHeight;\n    this.canvasOverlay.width = this.state.canvasWidth;\n    this.canvasOverlay.height = this.state.canvasHeight;\n    this.getCanvasPosition(this.canvasOverlay); //drawing all cells for base canvas\n\n    this.drawMap();\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  } //method used to draw all the cells for canvas\n\n\n  drawMap() {\n    for (let x = 0; x < this.state.rows; x++) {\n      let startingX = this.state.cellSize * x;\n\n      for (let y = 0; y < this.state.columns; y++) {\n        let startingY = this.state.cellSize * y;\n        this.drawCell(this.canvasVis, startingX, startingY, \"#7a7a7a\");\n      }\n    }\n  }\n\n  drawCell(canvasID, startX, startY, color) {\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    }, color);\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, color);\n  }\n\n  drawLine(canvasID, start, end, color) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  } //filling cell using top left coordiinates x and y of cell\n\n\n  fillCell(canvasID, x, y, fillColor) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + this.state.cellSize, y);\n    ctx.lineTo(x + this.state.cellSize, y + this.state.cellSize);\n    ctx.lineTo(x, y + this.state.cellSize);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  pixelToCell(pixelX, pixelY) {\n    let row = Math.floor(pixelX / this.state.cellSize);\n    let column = Math.floor(pixelY / this.state.cellSize);\n    let cell = {\n      x: row,\n      y: column\n    };\n    return cell;\n  }\n\n  handleMouseClick(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column cell which correspondds to where user clicked\n\n    let cellClicked = this.pixelToCell(offsetX, offsetY);\n    let x = cellClicked.x * this.state.cellSize;\n    let y = cellClicked.y * this.state.cellSize;\n    let ctx = this.canvasVis.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //this.fillCell(this.canvasVis,x,y,\"#7a7a7a\");\n  }\n\n  handleMouseHover(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top; //getting row and column of cell which correspondds to where user hovered\n\n    let cellHovered = this.pixelToCell(offsetX, offsetY); //getting x and y pixel value for cell\n\n    let pixelXValue = cellHovered.x * this.state.cellSize;\n    let pixelYValue = cellHovered.y * this.state.cellSize; //clearing all cells\n\n    let ctx = this.canvasOverlay.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); //updating hovered cell\n\n    this.drawCell(this.canvasOverlay, pixelXValue, pixelYValue, \"#f7071f\");\n    this.setState({\n      currentHoverCell: {\n        x: pixelXValue,\n        y: pixelYValue\n      }\n    });\n    /* if(this.state.currentHoverCell == null){\n         this.drawCell(this.canvasVis,pixelXValue,pixelYValue,\"#f7071f\");\n         this.setState({ currentHoverCell: {x: pixelXValue, y: pixelYValue} });\n     }else{\n          //removing old hover cell\n         this.drawCell(this.canvasVis,this.state.currentHoverCell.x,this.state.currentHoverCell.y,\"#7a7a7a\");\n         //coloring new hover cell\n         this.drawCell(this.canvasVis,pixelXValue,pixelYValue,\"#f7071f\");\n         this.setState({ currentHoverCell: {x: pixelXValue, y: pixelYValue} });\n     } */\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasVis => this.canvasVis = canvasVis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasOverlay => this.canvasOverlay = canvasOverlay,\n        onMouseDown: this.handleMouseClick,\n        onMouseMove: this.handleMouseHover\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js"],"names":["React","Component","ReactDom","visualizer","constructor","props","state","cellSize","rows","columns","canvasHeight","canvasWidth","currentHoverCell","handleMouseClick","bind","handleMouseHover","componentDidMount","canvasVis","width","height","canvasOverlay","getCanvasPosition","drawMap","canvasID","rect","getBoundingClientRect","setState","canvasPosition","left","right","top","bottom","x","startingX","y","startingY","drawCell","startX","startY","color","drawLine","start","end","ctx","getContext","beginPath","moveTo","strokeStyle","lineTo","stroke","closePath","fillCell","fillColor","fillStyle","fill","pixelToCell","pixelX","pixelY","row","Math","floor","column","cell","e","offsetX","pageX","offsetY","pageY","cellClicked","clearRect","cellHovered","pixelXValue","pixelYValue","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\n\nexport default class visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellSize: 15,\n            rows: 50,\n            columns: 40,\n            canvasHeight: 15 * 40,\n            canvasWidth: 15 * 50,\n            currentHoverCell: null\n        }\n\n        this.handleMouseClick = this.handleMouseClick.bind(this);\n        this.handleMouseHover = this.handleMouseHover.bind(this);\n    }\n\n    componentDidMount() {\n        //setting height and width of both canvas\n        this.canvasVis.width = this.state.canvasWidth;\n        this.canvasVis.height = this.state.canvasHeight;\n\n        this.canvasOverlay.width = this.state.canvasWidth;\n        this.canvasOverlay.height = this.state.canvasHeight;\n\n        this.getCanvasPosition(this.canvasOverlay);\n\n        //drawing all cells for base canvas\n        this.drawMap();\n    }\n\n    getCanvasPosition(canvasID) {\n        let rect = canvasID.getBoundingClientRect();\n        this.setState({ canvasPosition: {left: rect.left, right: rect.right, top: rect.top, bottom: rect.bottom } });\n    }\n\n    //method used to draw all the cells for canvas\n    drawMap() {\n\n        for(let x = 0; x < this.state.rows; x++){\n            let startingX = this.state.cellSize * x;\n            for(let y = 0; y < this.state.columns; y++){\n                let startingY = this.state.cellSize * y;\n\n                this.drawCell(this.canvasVis,startingX,startingY,\"#7a7a7a\");\n            }\n        }\n    }\n\n    drawCell(canvasID, startX, startY, color) {\n\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX + this.state.cellSize, y: startY}, color);\n        this.drawLine(canvasID,{x: startX + this.state.cellSize, y: startY},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY + this.state.cellSize},{x: startX + this.state.cellSize, y: startY + this.state.cellSize}, color);\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX, y: startY + this.state.cellSize}, color);\n        \n    }\n\n    drawLine(canvasID, start, end, color) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.strokeStyle = color;\n        ctx.lineTo(end.x,end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    //filling cell using top left coordiinates x and y of cell\n    fillCell(canvasID, x, y, fillColor) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.fillStyle = fillColor;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x+this.state.cellSize,y);\n        ctx.lineTo(x+this.state.cellSize,y + this.state.cellSize);\n        ctx.lineTo(x,y + this.state.cellSize);\n        ctx.lineTo(x,y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    pixelToCell(pixelX,pixelY) {\n\n        let row = Math.floor(pixelX / this.state.cellSize);\n        let column = Math.floor(pixelY / this.state.cellSize);\n\n        let cell = {x : row, y: column};\n\n        return cell;\n\n    }\n\n    handleMouseClick(e) {\n        const {left, right, top, bottom } = this.state.canvasPosition;\n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column cell which correspondds to where user clicked\n        let cellClicked = this.pixelToCell(offsetX,offsetY);\n\n        let x = cellClicked.x * this.state.cellSize;\n        let y = cellClicked.y * this.state.cellSize;\n\n        let ctx = this.canvasVis.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        //this.fillCell(this.canvasVis,x,y,\"#7a7a7a\");\n    }\n\n    handleMouseHover(e) {\n        \n        const {left, right, top, bottom } = this.state.canvasPosition; \n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        //getting row and column of cell which correspondds to where user hovered\n        let cellHovered = this.pixelToCell(offsetX,offsetY);\n\n        //getting x and y pixel value for cell\n        let pixelXValue = cellHovered.x * this.state.cellSize;\n        let pixelYValue = cellHovered.y * this.state.cellSize;\n\n        //clearing all cells\n        let ctx = this.canvasOverlay.getContext(\"2d\");\n        ctx.clearRect(0,0,this.state.canvasWidth,this.state.canvasHeight);\n\n        //updating hovered cell\n        this.drawCell(this.canvasOverlay,pixelXValue,pixelYValue,\"#f7071f\");\n        this.setState({ currentHoverCell: {x: pixelXValue, y: pixelYValue} });\n\n\n       /* if(this.state.currentHoverCell == null){\n            this.drawCell(this.canvasVis,pixelXValue,pixelYValue,\"#f7071f\");\n            this.setState({ currentHoverCell: {x: pixelXValue, y: pixelYValue} });\n        }else{\n\n            //removing old hover cell\n            this.drawCell(this.canvasVis,this.state.currentHoverCell.x,this.state.currentHoverCell.y,\"#7a7a7a\");\n            //coloring new hover cell\n            this.drawCell(this.canvasVis,pixelXValue,pixelYValue,\"#f7071f\");\n            this.setState({ currentHoverCell: {x: pixelXValue, y: pixelYValue} });\n        } */\n\n       \n\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref={ canvasVis => this.canvasVis = canvasVis}></canvas>\n                <canvas ref={ canvasOverlay => this.canvasOverlay = canvasOverlay} onMouseDown = {this.handleMouseClick} onMouseMove = {this.handleMouseHover} ></canvas>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}