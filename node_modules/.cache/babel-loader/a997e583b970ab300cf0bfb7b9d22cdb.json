{"ast":null,"code":"var _jsxFileName = \"/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cellSize: 15,\n      rows: 50,\n      columns: 40,\n      canvasHeight: 15 * 40,\n      canvasWidth: 15 * 50\n    };\n  }\n\n  componentDidMount() {\n    this.canvasVis.width = this.state.canvasWidth;\n    this.canvasVis.height = this.state.canvasHeight;\n    this.getCanvasPosition(this.canvasVis); //drawing all cells for canvas\n\n    this.drawMap();\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientReact();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  } //method used to draw all the cells for canvas\n\n\n  drawMap() {\n    for (let x = 0; x < this.state.rows; x++) {\n      let startingX = this.state.cellSize * x;\n\n      for (let y = 0; y < this.state.columns; y++) {\n        let startingY = this.state.cellSize * y;\n        this.drawCell(this.canvasVis, startingX, startingY);\n      }\n    }\n  }\n\n  drawCell(canvasID, startX, startY) {\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY\n    });\n    this.drawLine(canvasID, {\n      x: startX + this.state.cellSize,\n      y: startY\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    });\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY + this.state.cellSize\n    }, {\n      x: startX + this.state.cellSize,\n      y: startY + this.state.cellSize\n    });\n    this.drawLine(canvasID, {\n      x: startX,\n      y: startY\n    }, {\n      x: startX,\n      y: startY + this.state.cellSize\n    });\n  }\n\n  drawLine(canvasID, start, end) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  handleMouseClick(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top;\n    console.log(offsetX, offsetY);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasVis => this.canvasVis = canvasVis,\n        onMouseDown: this.handleMouseClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/GiovanniSYLVESTRE/Documents/path-finding-visualizer/src/Visualizer/visualizer.js"],"names":["React","Component","ReactDom","visualizer","constructor","props","state","cellSize","rows","columns","canvasHeight","canvasWidth","componentDidMount","canvasVis","width","height","getCanvasPosition","drawMap","canvasID","rect","getBoundingClientReact","setState","canvasPosition","left","right","top","bottom","x","startingX","y","startingY","drawCell","startX","startY","drawLine","start","end","ctx","getContext","beginPath","moveTo","lineTo","stroke","closePath","handleMouseClick","e","offsetX","pageX","offsetY","pageY","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport './visualizer.css';\n\nexport default class visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellSize: 15,\n            rows: 50,\n            columns: 40,\n            canvasHeight: 15 * 40,\n            canvasWidth: 15 * 50,\n            \n        }\n    }\n\n    componentDidMount() {\n        this.canvasVis.width = this.state.canvasWidth;\n        this.canvasVis.height = this.state.canvasHeight;\n        this.getCanvasPosition(this.canvasVis);\n\n        //drawing all cells for canvas\n        this.drawMap();\n    }\n\n    getCanvasPosition(canvasID) {\n        let rect = canvasID.getBoundingClientReact();\n        this.setState({ canvasPosition: {left: rect.left, right: rect.right, top: rect.top, bottom: rect.bottom } });\n    }\n\n    //method used to draw all the cells for canvas\n    drawMap() {\n\n        for(let x = 0; x < this.state.rows; x++){\n            let startingX = this.state.cellSize * x;\n            for(let y = 0; y < this.state.columns; y++){\n                let startingY = this.state.cellSize * y;\n\n                this.drawCell(this.canvasVis,startingX,startingY);\n            }\n        }\n    }\n\n    drawCell(canvasID, startX, startY) {\n\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX + this.state.cellSize, y: startY});\n        this.drawLine(canvasID,{x: startX + this.state.cellSize, y: startY},{x: startX + this.state.cellSize, y: startY + this.state.cellSize});\n        this.drawLine(canvasID,{x: startX, y: startY + this.state.cellSize},{x: startX + this.state.cellSize, y: startY + this.state.cellSize});\n        this.drawLine(canvasID,{x: startX, y: startY},{x: startX, y: startY + this.state.cellSize});\n        \n    }\n\n    drawLine(canvasID, start, end) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.lineTo(end.x,end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    handleMouseClick(e) {\n        const {left, right, top, bottom } = this.state.canvasPosition;\n        let offsetX = e.pageX - left;\n        let offsetY = e.pageY - top;\n\n        console.log(offsetX,offsetY);\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref={ canvasVis => this.canvasVis = canvasVis} onMouseDown = {this.handleMouseClick} ></canvas>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}